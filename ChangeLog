SimGrid (4.1) unreleased. Target: summer or fall 2025

S4U:
 - Deprecate Engine::add_actor in favor of Host::add_actor to avoid always passing the host 
   on which to create the new actor as parameter. 

Maint:
 - Simplify our code by removing SysV contexts which do not bring much. It's not portable on all OSes and a bit less efficient
   than our raw contexts. Raw contexts are limited to amd64 processors, but boost contexts should work on exotic architectures.
 - Perl is no longer a build dependency. Some scripts still use it, but they are not mandatory.
 
----------------------------------------------------------------------------

SimGrid (4.0) March 12. 2025

The "This one is 4 you" release. At last, this is the 4.0 release of SimGrid.

This is an important milestone for the SimGrid project, the culmination of
almost ten years of efforts, as described in this article: https://hal.science/hal-04909441

At the same time, this is also an incremental improvement over 3.36 as shown in the following changelog. We still have many
improvement ideas for the future and plan to keep the same release pace and plan: about 2 releases per year, and upgrade paths
that ensure your code will still compile, with warnings, for at least 3 releases. Please refer to the Release Notes in the
documentation for some of the envisioned future improvements.

SMPI:
 - Allow automatic benchmarking with --cfg=smpi/host-speed:auto

S4U:
 - Reduce the amount of static functions: deprecate Actor::create() functions in favor of Engine::add_actor()
 - Introduce Actor::get_instance() so that you don't have to call the static Engine::get_instance() method
 - Allow to turn disks on and off (it was limited to the kernel side until now). Tested in the activity livecycle tests.
 - Turning off a host now turns off the disks attached to this host. Conversely, turning the host back on brings back
   the disks online. Tested in teshsuite/src/host-on-off-disks.
 - Deprecate Host::set_factor_cb for Host::set_cpu_factor_cb to give the concerned host as a callback parameter.

sthread:
 - Implement pthread_exit() and pthread_cond_timedwait()
 - Further restrict portability: Linux only, and now also GLIBC only.

Model-checker:
 - Dependency on libevent was removed.
 - Greatly improve the performances, and fix some bugs.

Platform API:
 - The root netzone of every platform uses the full routing. It's created by default.
   The ability to change the root zone does not increase the expressivity in any way, but it greatly complicates our code.
 - Deprecate the create_*_zone() functions, add NetZone::add_netzone_*()
   Methods are better than functions.
 - Deprecate NetZone::set_parent(): it's now useless with the new API.
 - Revamp the creation of Cluster NetZones (Fat-Tree, Torus, and Dragonfly) to explicitely pass all the parameters defining a network topology as arguments and to define leafs, loopbacks, and limiter links with callbacks.

Python:
 - Add many missing bindings [Sergey Teryoshkin].
 - Add MPI bindings [Jean-NoÃ«l Quintin].

Java:
 - Reintroduce the bindings, on top of S4U.

Plugins:
 - Chaos Monkey: Allow to restart the actors by pid at a given time.
 - Chaos Monkey: Allow to restart disks.

C API:
 - Deprecate some functions (we want to kill xbt_dict and xbt_dynar in the
 future)
   - sg_actor_get_properties() -> sg_actor_get_property_names()
   - sg_host_get_properties() -> sg_host_get_property_names()
   - sg_zone_get_properties() -> sg_zone_get_property_names()
   - sg_zone_get_sons() -> sg_zone_get_childs()
   - sg_zone_get_hosts() -> sg_zone_get_all_hosts()
   - sg_actor_attach() now takes only 2 parameters (the props are removed)
 - Introduce sg_zone_get_property_names()

Dependencies:
 - If the compiler supports C++23, use the standard stacktraces instead of boost ones.

----------------------------------------------------------------------------

SimGrid (3.36) September 9. 2024

The Anne of Brittany release (she became a Duchess 536 years ago).

Intrusive changes:
 - Timeout on communications do not interrupt the comm anymore.
   This is for symmetry with the other activity kinds, which already had this behavior enabling polling activities.
   The previous behavior is still available with Activity::wait_for_or_cancel()
 - Remove the include/xbt/promise.hpp header, that was kinda internal.
 - Remove the ill-inspired communication matching mechanism. If you need it, talk to us (and use the kernel version).

S4U:
 - Starting Activities in a detached (a.k.a. fire-and-forget) mode is not limited to Comm and Mess anymore. Exec and
   I/O can also benefit from that feature. This allows users to create a sequence of interdependent activities
   (informally called a 'compound' activity and only wait for the completion of the last activity of the sequence.
 - Add Engine::get_hosts_from_MPI_hostfile(const std::string& hostfile) to select a list of hosts within a loaded
   platform from a text file. Each line of this text file comprises the name of a host (e.g., node-0) which can be
   followed by a number of repetitions (e.g., node-0:2 will add node-0 twice to the created list of hosts). This
   allows users to specify that more than one actor has to be started on a given host.
 - Add Engine::get_all_netzones() to build a list of all the NetZones (including the root Zone) declared.
 - Add Engine::papi_{start,stop,get_num_counters,get_counters}() to interact with PAPI.
 - Enable to track task instances at runtime, and add Task::on_this_instance_completion_cb()
 - Add SMPI_executable_start() to start a SMPI external binary instead of providing the code inline.
 - C API: Add sg_actor_start_voidp() to start actors using a pthread-like prototype, taking a void* as parameter.

Kernel:
 - Bugfix: non-recursive locks must deadlock when relocking by same actor.
 - Make NetZoneImpl extendable.
 - Implement asynchronous condvar acquisition. Not visible from the s4u API, but needed for the model-checker.
 - (internals) cleanup the implementation of timeouts for activities, and other bits of activities.

Models:
 - Introduce a 'raw' network model with overly simplistic equations, for non-TCP settings.

Model-checker:
 - Enable the verification of SimGrid programs written in Python.
 - Enable the verification of condition variables in both s4u and sthread.
 - Introduce option 'model-check/cached-states-interval' to control how often the application state is cached using fork,
   to speedup later restore when exploring other execution branches.
 - Introduce option 'model-check/no-fork' to forbid the use of system forks to speed-up the exploration.
   This is mandated for multithreaded applications, such as our Python bindings.
 - Introduce option 'model-check/max-errors' continue the exploration after the first errors.
 - Introduce option 'model-check/timeout-soft' to only search for a given amount of time
 - Enable the use of guiding strategies with DPOR, ODPOR and SDPOR (not UDPOR yet).
 - Allow to use mutexes and semaphores with UDPOR, that remains more experimental than the other explorations algorithms.
 - Support iprobes in MC, not yet with UDPOR.
 - Various bug fixes and performance optimizations all over the MC module.
 - New guiding strategy: min_context_switch trying to minimize the context switches, inspired from the paper
   "A randomized scheduler with probabilistic guarantees of finding bugs", by Musavathi et Al.
 - Compute the transition dependencies without considering the context. That may reduce the dependency detection,
   but it's much faster to compute so that should still be an optimization. The contextual gain of our dependency theorems
   was near to zero (because our compute model is not optimized toward that goal).
 - (internals) Reimplement the DPOR, ODPOR and SDPOR algorithms so that the code is closer to the pseudo-code of the
   articles. The correction of our implementation is thus easier to check.
 - Introduce a new option 'model-check/search-critical' to exhibit the critical transition when a failure is found.
   Before that transition, at least one exploration is correct; After it, all explorations are faulty.
   For now, the answer is approximate when a reduction algorithm is enabled.

sthread:
 - Disable all verbose outputs when STHREAD_QUIET environment variable is defined
 - Assume that unknown mutex types are similar to PLAIN ones (somehow true for ADAPTATIVE ones).
 - Various fixes and other robustness improvements.

Fixed bugs (FG#.. -> FramaGit bugs; FG!.. -> FG merge requests)
 (FG: issues on Framagit; GH: issues on GitHub)
 - FG#123: get_async for MessageQueue bugged
 - FG#117: Exec.set_tracing_category referenced in documentation but inexistant in Python

----------------------------------------------------------------------------

SimGrid (3.35) November 23. 2023

The "Thanks Giving up stateful model-checking" release. Stateless model checking remains.

S4U:
 - New class ActivitySet to ease wait_any()/test_any()/wait_all()
   - Deprecate {Comm,Io,Exec}::{wait_any,wait_all,test_any} and friends
 - Simplify a bit the declaration of multi-zoned platforms from C++
   - New function NetZone::add_route(host1, host2, links) when you don't need gateways
   - Also add a variant with s4u::Link, when you don't want to specify the directions
     on symmetric routes.
   - Zone's gateways can now be controlled directly.
   - Add NetZone::add_route(zone1, zone2, links) specifying the route between zones
 - Introduce a Mailbox::get_async() with no payload parameter. You can use the new
   Comm::get_payload() once the communication is over to retrieve the payload.
 - Implement recursive mutexes. Simply pass true to the constructor to get one.
 - Simplify the expression of horizontal scaling of Tasks.
   - Each Task now consists of a dispatcher, a collector and one or more instances.
   - The parallelism degree of each of these can be set.
   - Several examples have been added or modified accordingly.
   - Update s4u::create_DAG_from_json() to support wfformat 1.4.
 - Introduce a new MessageQueue abstraction and associated Mess simulated object.
   The behavior of a MessageQueue is similar to that of a Mailbox, but intended for
   control messages that do not incur any simulated cost. Information is automagically
   transported over thin air between producer and consumer. See examples/cpp/mess-wait
 - New function: Mutex::get_owner()

S4U plugins:
 - New: Add a JBOD (just a bunch of disks) concept. It's a sort of host with many disks.
 - Revamp the battery plugin: rewrite completely the API, for a better usability.
   The examples were updated accordingly.
   The battery can now act as a simple connector (see battery-connector example).
 - Revamp of the photovoltaic plugin: now called SolarPanel and complete rewrite of the API
 - Add chiller plugin: enable the management of chillers consuming electrical energy
   to compensate heat generated by hosts.
 - Add a battery-chiller-solar example combining several plugins to evaluate the amount
   of brown energy (from the electrical grid) and green energy (from the solar panel)
   during a given computation.

SMPI:
 - New SMPI_app_instance_join(): wait for the completion of a started MPI instance
 - MPI_UNIVERSE_SIZE now initialized to the total amount of hosts in the platform
 - Memory usage due to SMPI for non-MPI actors greatly reduced.
 - New implemented calls: MPI_Isendrecv, MPI_Isendrecv_replace

sthread:
 - Allow to use on valgrind-observed or gdb-observed processes.
 - Install sthread on user's disk.
 - Implement recursive pthreads.
 - Implement pthread_barrier and pthread_cond (but conditional are not supported by the MC yet).
 - Add some McMini codes to test sthread further (controlled with enable_testsuite_McMini).

Model checking:
 - Remove stateful model-checking. This was not used, not really working, and very hard to fix.
   Liveness properties cannot be verified anymore.
 - More informative backtraces on assertion failure.
 - Fix dependency bugs for mutex and other transitions
 - Fix some reversible_race definitions, and also the rest of ODPOR.

Python:
 - Make the host_load plugin available from Python. See examples/python/plugin-host-load
 - Mailbox::get_async() does not return a pair anymore. Use comm.get_payload() instead.
 - Comm::waitall/waitany/testany() are gone. Please use ActivitySet() instead.
 - Comm::waitallfor() is gone too. Its semantic was unclear on timeout anyway.
 - Io::waitany() and waitanyfor() are gone. Please use ActivitySet() instead.
 - Do not export the values of enums. So you need to write e.g. SharingPolicy.LINEAR
   while it should have been possible to write LINEAR alone before. This is the advised
   behavior for modern C++ code.

C API:
 - Introduce sg_activity_set_t and deprecate wait_all/wait_any/test_any for
   Exec, Io and Comm.

Kernel:
 - optimize an internal data structure (replace boost::circular_buffer_space_optimized by
   std::deque to store pending and unmatched Comms in Mailboxes). It is actually a revert
   to what was used a few years back. The boost structure had a lower memory footprint than
   deques, but it appeared that their "space_optimized" character was generating a huge lot
   of refcount changes on the stored Comms.

General:
 - Fix errors with ns-3 v3.36+
 - Many other small bug fixes, in particular in MC and sthread.

----------------------------------------------------------------------------

SimGrid (3.34) June 26. 2023

  Save the planet, skip a release: 3.33 was due 6 months ago, so skip directly to 3.34.

General:
 - SimGrid now requires a compiler with C++17 support for public headers too.
   Sibling projects should upgrade their FindSimGrid.cmake
 - Remove the MSG API: its EOL was scheduled for 2020.
 - Remove the Java bindings: they were limited to the MSG interface.
 - On Windows, you now need to install WSL2 as the native builds are now disabled.
   It was not really working anyway.
 - Support for 32bits architecture is not tested anymore on our CI infrastructure.
   It may break in the future, but we think that nobody's using SimGrid on 32 bits.
 - Remove the surf module. It was replaced by the kernel/models module, and that
   refactoring took almost 10 years to properly complete.

S4U:
 - Activity::set_remaining() is not public anymore. Use for example
   Comm::set_payload_size() to change the size of the simulated data.
 - New function: Engine::flatify_platform(), to get a fully detailed vision of the
   configured platform.
 - New Task abstraction: They are designed to represent dataflows, i.e, graphs of repeatable Activities.
   See the examples under examples/cpp/task-* and the associated documentation.
 - Full simDAG integration: Activity::start() actually starts only when all dependencies
   are fulfilled. If it cannot be started right away, it will start as soon as it becomes
   possible.
 - Allow to set a concurrency limit on disks and hosts, as it was already the case for links.
 - Rename Link::get_usage() to Link::get_load() for consistency with Host::
 - Every signal now come with a static version that is invoked for every object of that class,
   and an instance version that is invoked for this specific object only. For example,
   s4u::Actor::on_suspend_cb() adds a callback that is invoked for the suspend of any actor while
   s4u::Actor::on_this_suspend_cb() adds a callback for this specific actor only.
 - Activity::on_suspended_cb() is renamed to Activity::on_suspend_cb(), and fired right before the suspend.
 - Activity::on_resumed_cb() is renamed to Activity::on_resume_cb(), and fired right before the resume.
 - Resource::on_state_change_cb() is renamed to Resource::on_onoff_cb() to distinguish from the
   Activity::on_state_change_cb() that is related to the activity state machine, not on/off.
 - Activity signals (veto, suspend, resume, completion) are now specialized by activity class.
   That is, callbacks registered in Exec::on_suspend_cb will not be fired for Comms nor Ios.

New S4U plugins:
 - Battery: Enable the management of batteries on hosts.
   See the examples under examples/cpp/battery-* and the documentation in the Plugins page.
 - Photovoltaic: Enable the management of photovoltaic panels on hosts.
   See the examples under examples/cpp/photovoltaic-* and the documentation in the Plugins page.

Kernel:
 - optimize an internal data structure (use a set instead of a list for ongoing activities),
   leading to a potentially big performance gain, in particular with many detached comms.

MPI:
 - New option smpi/barrier-collectives to add a barrier to some collectives
   to detect dangerous code that /may/ work on some MPI implems.
 - New function SMPI_app_instance_start() to easily start a MPI instance in your S4U simulation.

Models:
 - Write the section of the manual about models, at least.
 - WiFi: the total capacity of a link depends on the amount of flows on that link.
   - Use the nonlinear callback feature of LMM to reflect this.
   - Calibration values can be changed to match different MCS configurations
   - See the example teshsuite/models/wifi_usage_decay/wifi_usage_decay.cpp
   - See also "A Flow-Level Wi-Fi Model for Large Scale Network Simulation"
     https://hal.archives-ouvertes.fr/hal-03777726
 - Merge parameters network/bandwidth-factor and smpi/bw-factor that serve the same purpose.
   - Same for the latency
   - Rewrite the corresponding documentation.
 - Allow to disable the TCP windowing modeling by setting network/TCP-gamma to 0.
 - Finally kill the 'compound' host model. You can change the CPU or network model
   with the default host model, as it should.
 - Rename option "surf/precision" to "precision/timing" for clarity.
 - Rename option "maxmin/precision" to "precision/work-amount" for clarity.
 - New function: Engine::flatify_platform() to debug your platform.

sthread:
 - Implement pthread_join in MC mode.
 - Implement semaphore functions in sthread.
 - Add an intricated way to verify the access to non-reentrant data structures
   It requires code annotation, as shown in examples/sthread/stdobject/stdobject.cpp

Model checking:
 - Stateless model-checking is now usable on any system, including Mac OSX and ARM processors.
 - The stateless aspects of the MC are now enabled by default in all SimGrid builds.
   Liveness and stateful aspects are still controlled by the enabling_model-checking
   configuration option.
 - Introducing ODPOR and SDPOR reduction strategies
 - Introducing guiding heuristics, trying to find bugs faster than DFS in reduced state space.
 - Synchronize the MBI tests with upstream.
 - Show the full actor backtraces when replaying a MC trace (with model-check/replay)
   and the status of all actors on deadlocks in MC mode.

XBT:
 - simgrid::xbt::cmdline and simgrid::xbt::binary_name are gone.
   Please use simgrid::s4u::Engine::get_cmdline() instead.

Documentation:
 - New tutorial on simulating DAGs.
 - New section in the user guide on the provided performance models.
 - New section presenting some technical good practices for (potential) contributors.
 - Add a section on errors and exceptions to the API documentation.
 - Move the s4u examples to a section on their own to ease navigation.

Fixed bugs (FG#.. -> FramaGit bugs; FG!.. -> FG merge requests)
 (FG: issues on Framagit; GH: issues on GitHub)
 - FG#18: Java bindings should be redone or removed
 - FG!118: Wi-Fi callback mechanism
 - FG!119: SMPI: add option to inject a barrier before every collective call
 - GH#383: Segfault when adding a disk after load_platform(xml)

----------------------------------------------------------------------------

SimGrid (3.32) October 3. 2022.

The Wiedervereinigung release. Germany was reunited 32 years ago.

General:
 - SimGrid now requires a compiler with C++17 support to compile the lib.
   Our public headers still allow the user code to be compiled in C++14.
 - Support graphviz v3 and ns-3 v3.36 (older versions are still supported).
 - Tested with clang (v11, v13, v14 and v16), gcc (v7 to v13) and IntelCC v2022.2

S4U:
 - API evolutions:
   - kill signal Comm::on_completion that was not working anyway.
   - Expose signals Activity::on_suspend and Activity::on_resume
   - New macro xbt_enforce(): similar to xbt_assert(), but throws an AssertionError
     instead of calling abort().
   - New: s4u::Exec::get_thread_count()
 - Various cleanups around virtual machines:
   - host_by_name() and friends now only return hosts. VMs are now excluded.
   - It is now impossible to search a VM by name globally.
     You can only search VM by name on a given PM, so either you know
     the PM on which your VM runs and you can search by name, or you need
     to manually iterate over all PMs to search this VM.
   - The s4u::VirtualMachine constructor is now deprecated.
     Please use s4u::Host::create_vm() instead.
   - Rename s4u::VirtualMachine::on_creation() to on_vm_creation() to
     avoid confusion with s4u:Host::on_creation() that is inherited.
     Also s4u::VirtualMachine::on_destruction -> on_vm_destruction().
 - Bug fixes:
   - One-sided communications (Comm::sendto) can now be detached,
     and should now be more resilient to network and host faults.

Python:
 - Added the following bindings / examples:
   - Comm (now 100% covers the C++ interface):
     - Comm.dst_data_size, Comm.mailbox, Comm.sender, Comm.start_time, Comm.finish_time
     - Comm.state_str [examples: examples/python/comm-failure/, examples/python/comm-host2host/]
     - Comm.remaining [examples: examples/python/comm-host2host/, examples/python/comm-suspend/]
     - Comm.set_payload_size [example: examples/python/comm-host2host/]
     - Comm.set_rate [example: examples/python/comm-throttling/]
     - Comm.sendto, Comm.sendto_init, Comm.sendto_async [example: examples/python/comm-host2host/]
     - Comm.start, Comm.suspend, Comm.resume [example: examples/python/comm-host2host/]
     - Comm.test_any [example: examples/python/comm-testany/]
     - Comm.wait_until [example: examples/python/comm-waituntil/]
   - Engine:
     - Engine.host_by_name [example: examples/python/comm-host2host/]
     - Engine.mailbox_by_name_or_create [example: examples/python/comm-pingpong/]
     - Engine.set_config
   - Mailbox: Mailbox.ready [example: examples/python/comm-ready/]
   - Ptask [example: examples/python/exec-ptask/]:
     - this_actor.exec_init
     - this_actor.parallel_execute
     - Exec.suspend
     - Exec.wait_for
 - Added an AssertionError exception that may be thrown in case of error.
   For instance, creating two hosts with the same name will now throw this exception
   instead of killing the interpreter.

SMPI:
 - Implement MPI_File_get_type_extent(), MPI_File_s/get_atomicity() and
   MPI_File_get_byte_offset()
 - Intercept getpid() calls to return the simulated ones.
 - Fix various bugs in MPI IO.

Platform description & visualization:
 - More robust sanity checks for platforms, to reject forbidden topologies with
   a proper error message.
 - New platform example: supernode.cpp and supernode.py.
   The Python version generates a nice graphical representation of the platform.
 - Bug fixes around fat-tree topologies.
 - Allow to dump the platform topology as a CSV file representing the graph edges
   with platform_graph_export_csv() (similar to the DOT export).
 - Fix graphicator for "cluster" topologies (e.g. fat-tree, dragonfly).

Models:
 - Fix a bug when using ptasks with multicores (FG!111).

Model-Checker:
 - First bits of sthread, that intercepts pthread operations at runtime.
   The intend is to use it together with simgrid-mc, but it is TBD.
 - Sync MBI generators with upstream changes.
 - Various cosmetics, small bug fixes and inner refactorings

Fixed bugs (FG#.. -> FramaGit bugs; FG!.. -> FG merge requests)
 (FG: issues on Framagit; GH: issues on GitHub)
 - FG#105: "Variable penalty should not be negative!" with in-flight messages and bandwidth profiles
 - FG#109: Application time reported by --cfg=smpi/display-timing:yes is wrong
 - FG#110: Wait_any does not trigger new model solve when host events occur
 - FG#111: Wrong execution time in rare cases when using multicore
 - FG!98: Re-enable the tests for legacy stochastic profiles
 - FG!109: Trigger new engine solve upon host events such as host on/off
 - FG!116: SMPI/replay: Fix issue with recv of size =0

----------------------------------------------------------------------------

SimGrid (3.31) March 22. 2022.

The Ð½ÐµÐ½Ð°ÑÐ¸Ð»ÑÑÑÐ²Ð¾ release. We stand against war.

Against the agression by a sick system that forces peoples to take arms against each other.

MC:
 - Rework the internals, for simpler and modern code. This shall unlock many future improvements.
 - You can now define plugins onto the DFS explorer (previously called SafetyChecker), using the
   declared signals. See CommunicationDeterminism for an example.
 - Support mutex, semaphore and barrier in DPOR reduction
 - Seems to work on Arm64 architectures too.
 - Display a nice error message when ptrace is not usable.
 - New test suite, imported from the MPI Bugs Initiative (MBI). Not all MBI generators are integrated yet.
 - Remove the ISP test suite: it's not free software, and it's superseeded by MBI.

SMPI:
 - fix for FG#100 by ensuring small asynchronous messages never overtake larger
   ones, conforming to the standard.
 - replay: fix waitall behaviour to avoid forgetting requests and leaking
   their handles.
 - tracing: ensure that we dump the TI traces continuously during execution and
   not just at the end, reducing memory cost and performance hit.
 - Update OpenMPI collectives selection logic to match current one (4.1.2)
 - Add a coherence check for collective operation order and root/MPI_Op
   coherence. Potentially costly so not activated unless smpi:pendantic is set
   or -analyze is given.

S4U:
 - New signal: Engine::on_simulation_start_cb()
 - Introduce a new execution mode with this_actor::thread_execute(). This simulate
   the execution of a certain amount of flops by multiple threads ran by a host. Each
   thread executes the same number of flops, given as argument. An example of this new
   function can be found in examples/cpp/exec-threads.
 - Reimplementation of barriers natively.
   Previously, they were implemented on top of s4u::Mutex and s4u::ConditionVariable.
   The new version should be faster (and can be used in the model-checker).
 - Actor::get_restart_count(): Returns the number of reboots that this actor did.

MSG:
 - MSG_barrier_destroy now expects a non-const msg_barrier parameter.

New plugin: the Chaos Monkey (killing actors at any time)
 - Along with the new simgrid-monkey script, it tests whether your simulation
   resists resource failures at any possible timestamp in your simulation.
 - It is mostly intended to test the SimGrid core in extreme conditions,
   but some users may find it interesting too.

Models:
 - New solver for parallel task: BMF.
   - More realistic sharing of heterogeneous resources compared to the fair
   bottleneck solver used by ptask_L07.
   - Implement the BMF (Bottleneck max fairness) fairness.
   - Improved resource sharing for parallel tasks with sub-flows (parallel
     communications between same source and destination inside the ptask).
   - Parameters:
     - "--cfg=host/model:ptask_L07 --cfg=host/solver:bmf": enable the ptask
	 model with BMF solver.
     - "--cfg=bmf/max-iterations: <N>": maximum number of iterations performed
        by BMF solver (default: 1000).
     - "--cfg=bmf/precision: <N>": numerical precision used when computing
	 resource sharing (default: 1e-12).
   - This model requires Eigen3 library. Make sure Eigen3 is installed to use BMF.

General:
  - Modifications of the Profile mechanism, with some impact on users
    - Addition of a new (S4U) method to init profiles from generic functions to improve versatility
    - Fix initial behaviour of state_profiles
    - Modify periodicity to behave like a period, and not like a loop delay

XBT:
 - Drop xbt_dynar_shrink().

Python:
 - Made the following bindings static (previously member functions):
   - Actor: Actor.kill_all(), Actor.by_pid()
   - Host: Host.by_name(), Host.current(), Host.on_creation_cb()
   - Mailbox: Mailbox.by_name()
 - Added the following bindings:
     - this_actor.warning()
     - Mailbox.put_init() [example: examples/python/comm-waitallfor/]
     - Comm.detach() [example: examples/python/comm-waitallfor/]
     - Comm.wait_for() [example: examples/python/comm-waitfor/]
     - Comm.wait_any_for()
     - Comm.wait_all_for() [example: examples/python/comm-waitallfor/]
     - Mutex [example: examples/python/synchro-mutex/]
     - Barrier [example: examples/python/synchro-barrier/]
     - Semaphore [example: examples/python/synchro-semaphore/]

Build System:
 - Remove target "make uninstall" which was incomplete and no longer maintained.

Fixed bugs (FG#.. -> FramaGit bugs; FG!.. -> FG merge requests)
 (FG: issues on Framagit; GH: issues on GitHub)
 - FG#57: Mc SimGrid should test whether ptrace is usable
 - FG#87: Smpi scripts fail with spaces in paths
 - FG#100: [SMPI] Order of the message matching is not guaranteed
 - FG#101: LGPL 2.1 is deprecated license
 - FG#104: "make uninstall" not up-to-date
 - GH#151: Missing mutexes for DPOR.

----------------------------------------------------------------------------

SimGrid (3.30) January 30. 2022.

The Sunday Bloody Sunday release.

Main user-visible changes:
 - The SimDag API for the simulation of the scheduling of Directed Acyclic
   Graphs has been dropped. It was marked as deprecated for a couple of years.
   We finally complete the implementation of what has been called SimDag++
   internally, i.e., porting the different features of SimDag on top of S4U.
   The new way to simulate the execution of dependent activities directly by
   maestro (without any other actor) is details in the examples/cpp/dag-* series
   of examples.
 - The removal of SimDag led us to also remove the export to Jedule files that
   was tightly coupled to SimDag. The instrumentation of DAG simulation is still
   possible through the regular instrumentation API based on the Paje format.
 - We also dropped the old and clumsy Lua bindings to create platforms in a
   programmatic way. It can be done in C++ in a much cleaner way now, which
   motivates this suppression.

S4U:
 - Introduce on_X_cb() functions for all signals, to attach a new
   callback to the signal X. The signal variables are now hidden and
   only these functions should be used.
   Rationale: this enables the usual deprecation scheme where functions
   remain for 4 releases if we need to modify the signals, while the
   current code with the signal variables directly visible prevents any
   smooth transition.
 - New function: Engine::run_until(date), to split the simulation.
 - New signal: Activity::on_veto, to detect when an activity fails to start.
 - Signal change: Comm::on_start(Comm&, bool) has been replaced by
   Comm::on_send and Comm::recv. These two signals respectively correspond to
   when the sending or receiving side of a Comm is ready. They are raised at
   the same locations as the former Comm::on_start signal.
 - New function: Engine::track_vetoed_activities() to interrupt run()
   when an activity fails to start, and to keep track of such activities.
   Please see the corresponding example for more info.
 - New functions: s4u::Comm::{sendto_init, set_source, set_destination} to enable
   the use of vetoers with direct host-to-host communications. Both source and
   destination have to set for a comm to start. Each call to these setters check
   if all vetoes are satisfied. When it is the case, the comm starts. A use case of
   these functions is given in examples/cpp/dag-scheduling.
 - New functions: {Exec, Io}::update_priority allow you to modify the priority of
   these kinds of activities during their execution. Behavior is detailed in
   examples/cpp/io-priority/.

SMPI:
 - Dynamic costs for MPI operations: New API to allow users to dynamically
   change injected costs for MPI_Recv, MPI_Send and MPI_Isend operations.
   Alternative for smpi/or, smpi/os and smpi/ois configuration options.
 - Fix some issues with the replay mechanism.

XBT:
 - Function xbt::Extendable::get_data() is now templated with the type of the
   pointee. Untyped function is deprecated. Use get_data<void>() if you still
   want to retrieve void*.

Documentation:
 - New section: "SimGrid MPI calibration of a Grid5000 cluster"
   presenting how to properly calibrate MPI communications in SimGrid.
 - Complete and reword the platform section, which is now completed.

Python:
 - Thread contexts are used by default with Python bindings.  Other kinds of
   contexts revealed unstable, specially starting with pybind11 v2.8.0.

Fixed bugs (FG#.. -> FramaGit bugs; FG!.. -> FG merge requests)
 (FG: issues on Framagit; GH: issues on GitHub)
 - FG#95: Wrong computation time for multicore execution after pstate change
 - FG#97: Wrong computation time for ptask+multicore+pstates
 - FG#98: SMPI offline simulation is inconsistent with the online simulation
          (deadlocks / message truncation)
 - FG#99: Weird segfault when not sealing an host

----------------------------------------------------------------------------

SimGrid (3.29) October 7. 2021

The "Ask a stupid question" release.

We wish that every user ask one question about SimGrid to celebrate.
On Mattermost, Stack Overflow or using the issues tracker.

New modeling features:
 - Non-linear resource sharing, modeling resources whose performance heavily degrades with contention:
   - The total capacity may be updated dynamically through a callback
     and depends mainly on the number of concurrent flows.
   - Examples (both cpp and python): io-degradation, network-nonlinear, exec-cpu-nonlinear

 - Dynamic factors: model variability in the speed of activities
    - Each action can now have a factor that affects its progression.
      This multiplicative factor is applied when updating the amount of work
      remaining, thereby an activity with factor=0.5 only uses half of the
      instantaneous power/bandwidth it is allocated and will appear twice
      slower than what it actually consumes.
    - This can be used to model a overhead (e.g., there is a 20 bytes
      header in a 480 bytes TCP packet so the factor 0.9583) but the novelty
      is this factor can now easily be adjusted depending on activity's and
      resources characteristics.
    - This existed for network (e.g., the effective bandwidth depends
      on the message in SMPI piecewise-linear network model) but it is now
      more general (the factor may depend on the source and destination and
      thus account to different behaviors for intra-node communications and
      extra-node communications) and is available for CPUs (e.g., if you
      want to model an affinity as in the "Unrelated Machines" problem in
      scheduling) and disks (e.g., if you want to model a stochastic
      capacity) too.
    - For that, resources can be provided with a callback that computes
      the activity factor when creating the action.
    - Example: examples/cpp/exec-cpu-factors
    - The same mechanism is also available for the latency, which
      allows to easily introduce complex variability patterns.

Python:
 - Added support to programmatic platform creation in Python.
   Example: examples/python/clusters-multicpu

S4U:
 - Disk and Host now have a set_sharing_policy() too, for non-linear sharing.
   This can only be set through the API, not through XML files.

SMPI:
 - TI Tracing/Replay:
   - Multiple fixes to ensure reproducibility of tracing
   - scan/excan can now be replayed
   - wait action now uses ranks and not pid, as the other ones.
   - smpi/init and smpi/finalization-barrier are now valid for replays.
 - exit() is now intercepted by SMPI to avoid premature shutdown of
   simulation. First non 0 return codes is returned as simulation return
   code.

Documentation:
  * New section "Release Notes" documenting recent and current developments.
  * New section "Modeling I/O: the realistic way" presenting how to properly model disks in SimGrid.
  * Improvements in API Reference for C++ and Python interfaces.

ns-3 model:
 - Make wifi creation compatible with ns-3 version 3.34 too.

Fixed bugs (FG#.. -> FramaGit bugs; FG!.. -> FG merge requests)
 (FG: issues on Framagit; GH: issues on GitHub)
 - FG#77: Search feature of doc is broken (update sphinx theme version)
 - FG#78: Multiple fixes for SMPI replay:
    - TI tracing of allotallv/w was outputting wrong values
    - MPI_LOGICAL in fortran is actually 32 bits wide, and not 8.

----------------------------------------------------------------------------

SimGrid (3.28) July 14. 2021

The Victoriadagarna Release.

New features:
 - C++ platform interface: Users can now describe their platform directly in C++.
   This provides greatly flexibility and performance improvement for complex
   platforms. Main features:
     - Fat-Tree/DragonFly/Torus composing: allows you to create clusters of
       "zones", instead of single hosts. This feature enables the description
       of clusters with complex hosts, composed of several CPUs, GPUs, etc.
     - StarZone: new zone with a Star-like topology. The routes are defined
       as a set of links used to communicate from node to everybody (node<->ALL).
     - Split-Duplex links: auxiliary method to create split-duplex links in
       the platform, easing its utilisation. It automatically creates both UP
       and DOWN links (similarly as done in XML).
     - Please refer to the documentation and the examples included:
       e.g. examples/cpp/clusters-multicpu/ and examples/platforms/*.cpp.
 - New plugin: Producer-Consumer with monitor. Just requires to include the
   include/simgrid/plugins/ProducerConsumer.hpp header to be used. See the
   associated example (examples/cpp/plugin-prodcons).

S4U:
 - New: s4u::Comm::wait_all_for() (like s4u::Comm::wait_all, but with a timeout),
        s4u::Io::wait_any(), s4u::Io::wait_any_for().
 - Methods test_all/test_any/wait_all/wait_any in s4u now take their vector
   parameter by reference, instead of a pointer.
 - Fixed a bug where Activity::wait_for() killed the activity on timeout.
   Explicitly cancel the activity to get back to previous behavior.
 - New: Link::set_concurrency_limit() to limit the amount of concurrent flows.

SMPI:
 - The default SMPI compiler flags are no more taken from the environment.
   They can be explicitly set through cmake parameters SMPI_C_FLAGS,
   SMPI_CXX_FLAGS, or SMPI_Fortran_FLAGS.
 - New options:
    --cfg=smpi/finalization-barrier: which can be used to add
      a barrier inside MPI_Finalize. This can help for some codes which cleanup
      data attached to a process, but still used in other SMPI processes.
    --cfg=smpi/errors-are-fatal: True by default, behaves like if MPI_ERRORS_RETURN
      is active when set to false, to keep going after a small error
    --cfg=smpi/pedantic: True by default. Do not report some harmless MPI errors
      which may or may not be problematic in the end.
 - Sampling:
    - fix behaviour, as maximum iteration count could be ignored
    - add SMPI_SAMPLE_LOCAL_TAG and SMPI_SAMPLE_GLOBAL_TAG macros, to allow user to
      use sampling when the same kernel is called with a different set of parameters
      which have an impact on the timing.
 - realloc is now intercepted, to be coherent, as malloc/calloc/free were already.
   It should now work with smpi/auto-shared-malloc-thresh.
 - Improve error handling and reporting in multiple places
 - Improve correctness checks on the MPI code.(MPI_Op and MPI_Datatype
   validity checks, truncated messages are now an error, return errors
   when explicitely deleted handles are reused, ...)
 - RMA: multiple fixes and stability improvements.
 - analysis (-analyze flag in smpirun):
    - SMPI can now report buffer leaks as well as MPI handles leaks,
      if code was compiled without SMPI_NO_OVERRIDE_MALLOC.
    - if -trace-call-location is used when compiling, SMPI can report
      origin of leaked handles/buffers
    - group leaks by type/origin in output message if possible
 - New implemented MPI calls: MPI_Comm_test_inter

Models:
 - Changed internal implementation of bandwidth factors in network models.
   Models affected: CM02, LV08 (default), SMPI, IB.
   Configuration affected: "network/bandwidth-factors" and "smpi/bw-factors".
   Bandwidth factors are applied to communications to describe that users
   cannot use 100% of the available bandwidth. For example, the default network model,
   LV08, applies a factor of 0.97 to the bandwidth. In older versions, this
   behavior was implemented by limiting the bandwidth available in the LMM
   system for this flow. This may give the false impression that there is
   bandwidth available for other flows due to its underutilization, especially
   for the dynamic bandwidth factors used in SMPI models.
   To avoid this, we have modified the implementation so that each flow uses the
   maximum physical bandwidth according to the LMM system.
   However, the actual throughput of the flow seen by the user is defined by
   the physical bandwidth multiplied by the bandwidth factor.
   This change impacts on the simulation results for all network models on
   which we have bandwidth factors configured.
   *****************************************
   *DO NOT MIX 3.28 RESULTS WITH OLDER ONES*
   *****************************************
   This change may impact on the timing of your simulation results.
   Take care when comparing simulations from different SimGrid's
   versions. Sorry for the inconvenience.
 - Dynamic network factors: users can configure a callback to define
   the network factors dynamically. This API is available at
   simgrid::kernel::resource::NetworkModelIntf.
   - Users have access to complete information about the current communication
     to decide which factor to apply. This includes: message size, source and
     destination hosts, links and zones traversed.
   - Dynamic factors for both latency and bandwidth.
   - For more details, see the example in (examples/cpp/network-factors).
 - Plugin host_energy: the "watt_off" and "watt_per_state" host properties,
   deprecated since version 3.24, are no longer supported. Instead, use
   "wattage_off" and "wattage_per_state".

XBT:
 - xbt_assert is not disabled anymore, even when built with enable_debug=off.

Documentation:
 - New tutorial: Model-checking and formal assessment
 - New sections: "Demystifying the routing" and "C++ platforms"
 - Update and improve the part on visualization in MPI and Algo tutorials.
 - Improve the section on routing: how to define it, how it's used internally
 - Fix many issues, broken links and missing references in doxygen and Sphinx

LUA:
 - Lua platform files are deprecated. Their support will be dropped after v3.31.

Simix:
 - Legacy functions deprecated in this release: SIMIX_get_clock(), SIMIX_run().

Fixed bugs (FG#.. -> FramaGit bugs; FG!.. -> FG merge requests)
 (FG: issues on Framagit; GH: issues on GitHub)
 - FG#47: Complete and fix tests from teshuite/s4u/activity-lifecycle
 - FG#64: Configuring smpi/IB-penalty-factors
 - FG#67: Running computation concurrently with MPI_Iallreduce
 - FG#69: Tutorial misleading users of pre-v3.26 versions of SimGrid
 - FG#71: Segmentation fault on invalid gw_src/gw_dst
 - GH#322: Issue when an actor kills his host vm

----------------------------------------------------------------------------

SimGrid (3.27) March 29. 2021

The Ragnar Release (anniversary of the siege of Paris by Vikings in 845)

Main user-visible changes:
 - All functions marked as deprecated for one year were removed.
 - Removed all that was related to the "Storage" type in all APIs and bindings.
   "Disks" have been introduced more than a year ago to replace them for the better.
   It's time to finish this replacement.
 - SMPI ABI breaks from previous version: MPI global handles (predefined datatypes,
   ops, COMM_WORLD) are now defined differently, and can be used in initializers,
   avoiding "initializer element is not constant" errors with some codes. Please be
   careful to recompile your MPI codes if switching to this new SimGrid version.
 - Network model ns-3 now requires version ns-3.28 or higher.
 - Removed some option aliases that were deprecated since v3.23 (June 2019)
   - 'verbose-exit' is now 'debug/verbose-exit'
   - 'simix/breakpoint' is now 'debug/breakpoint'
   - 'clean-atexit' is now 'debug/clean-atexit'

S4U:
 - New functions: Comm::sendto_{init,async} to initiate a communication
   on between two (possibly remote) hosts.
 - Define new template functions Mailbox::get_unique(), returning a std::unique_ptr.
 - Functions Mailbox::get() and Mailbox::get_async() are now templated with the
   type of the pointee. Untyped functions are deprecated. Use Mailbox::get<void>()
   or Mailbox::get_async<void>() if you really want to play with void*.
 - Unify the interface of Activity::on_{start/activity}
 - New function: Comm::get_dst_data()
 - New function: Comm::set_payload_size() to set the amount of bytes to simulate.

Models:
 - ptask should now work better with multicore hosts (FG#37).
 - Internal cleanups and refactoring around activities, to prepare for SimDAG++.
 - Internal cleanups and refactoring around models, to prepare for programmatic
   platform creation.
 - Modernize our tests of the performance models

Documentation:
 - User manual:
   - New section: Configuring the logs from the command line.
   - New section: Programming API of logs.
   - New section: Getting realistic results
   - New section: Examples of SMPI Usage
 - New part: SimGrid's Internals, with a section on Design goals
 - Move back to the classical Breathe tool chain, and fix many small glitches.

SMPI:
 - Handle leak checking: SMPI will now display a message if MPI handles are still
   present at the end of a simulation. Option smpi/list-leaks:n will display the n
   first leaked pointers and their types.
 - smpi/display-allocs option : Display Memory allocations analysis, with hints
   about the largest allocations. This only works for allocations with malloc/calloc
   and not compiled with SMPI_NO_OVERRIDE_MALLOC
 - "-analyze" option in smpirun will activate smpi/display-allocs and smpi/display-timing
 - New implemented MPI calls: MPI_File_set_size, MPI_Aint_add, MPI_Aint_diff,
   MPI_Type_get_extent_x, MPI_Type_get_true_extent_x, MPI_Status_set_elements_x
 - Support for MPI C++ datatypes (MPI_CXX_BOOL, MPI_CXX_FLOAT_COMPLEX,
   MPI_CXX_DOUBLE_COMPLEX, MPI_CXX_LONG_DOUBLE_COMPLEX)
 - Replay now opens and parses the trace file only once for all ranks when possible.
 - Misc fixes:
   - better handling of MPI_PROC_NULL
   - MPI_Group_incl was broken in some cases
   - PAPI tracing now fixed
   - MPI_Errhandlers are properly handled for MPI_COMM_WORLD
   - SMPI will now fail properly when receive size < sent size, instead of
     just setting MPI_ERR_TRUNCATE and keep going.
 - Proxy Apps ( https://framagit.org/simgrid/SMPI-proxy-apps ):
   - Remove useless build patches and split build/run patches on the page
   - Build in parallel when possible
   - Test on yum-based systems
   - New nightly tested Proxy-apps:
     - OpenMPI mpi-test-suite
     - Coral MCB, LSMS, Qbox, CLOMP
     - ECP/Mantevo Cloverleaf3D, Ember
     - Codevault bhtree_mpi

Model checker:
 - Only initialize the Dwarf parser when needed, saving 10 seconds in most cases.
 - Start to overhaul the implementation to modernize it (still ongoing).

XBT:
 - Drop simgrid::xbt::demangle(). Please use boost::core::demangle() instead.
 - Drop xbt_dynar_cursor_rm(), xbt_dynar_search_or_negative(),
   xbt_str_split_quoted(), xbt_str_split_quoted_in_place().
 - Deprecate xbt_dynar_to_array().
 - When an exception occurs in kernel mode, display both the actor and kernel stacks.

C binding and interface:
 - Rename (lowercase) functions sg_actor_get_PID, sg_actor_get_PPID, sg_actor_by_PID.
 - Constness requirement has been lowered for parameter argv of sg_actor_start()
   and sg_actor_create() It's now (char* const*). The previous version is still
   available as sg_actor_start_() and sg_actor_create_().

Fixed bugs (FG#.. -> FramaGit bugs; FG!.. -> FG merge requests)
 (FG: issues on Framagit; GH: issues on GitHub)
 - FG#37: Parallel tasks are limited to 1 core per host
 - FG#62: Running "smpirun -replay" on large networks
 - FG!46: Fix a few potential memory leaks in SMPI colls
 - GH#343: Wrong consumed energy when an exec timeouts

----------------------------------------------------------------------------

SimGrid (3.26) December 15. 2020

The Release release (the French lockdown was eased today).

Important user-visible changes:
 - SimGrid now requires a compiler with C++14 support.
   Sibling projects should upgrade their FindSimGrid.cmake
 - Surf precision default value is now 1e-9, instead of 1e-5. This was changed as
   several users had difficulties to understand issues when using high bandwidth or
   small latency events. The new value was already the default for SMPI and
   should not cause too much performance hit. It can change some simulation
   timings if simulation was skipping a lot of small events (which was actually
   an issue per see). The old value can be restored with --cfg=surf/precision:1e-5.
 - On some network models (L07, CM02, LV08), an implicit loopback link is created
   for local communication. Default bandwidth was 500MBps and latency was 15Âµs,
   which was rather bad. Default values have been changed to 10GBps and 0 latency.
   Options network/loopback-lat and network/loopback-bw have been added to adapt
   these values if needed. Network and routing models already providing separate
   loopbacks (clusters and such) are not impacted by this change.
 - SMPI now adds 16 bytes of header to each message sent, in order to simulate
   metadata that are added to each MPI message by MPI libraries (tag,
   src/dest, and communicator information). This may change simulation times
   for very small message sizes, but should be more realistic.

New features:
 - New routing 'WiFi' that makes it easier to specify a wifi network zone.
 - New plugins: wifi_energy and link_load. See the associated examples.
 - New examples: wifi networks, and communication suspend.

General:
 - LTO is now enabled for Intel/clang compilers.
 - LTO behavior on GCC can be parameterized using LTO_EXTRA_FLAG in cmake.
   Setting it to "auto" will use all available cores, while setting it to n will
   use n cores to speedup link step (usage: cmake -DLTO_EXTRA_FLAG=4).
 - Remove obsolete runtime option 'contexts/parallel-threshold'.
 - Runtime option 'tracing/msg/process' renamed to 'tracing/actor'. The old name
   has been kept for compatibility.
 - Finally remove obsolete snake_case() aliases for runtime options.
 - Further improve the documentation.

S4U:
 - the on_exit() of each actor is also executed when the simulation deadlocks.
 - New functions: s4u::Activity:: suspend(), resume() and is_suspended()
   An example is provided for s4u::Comm but it should work with Exec and Io.

SMPI:
 - Update proxy apps coverage of new ECP apps: 60+ apps now tested nightly on
   https://framagit.org/simgrid/SMPI-proxy-apps
 - MPI/IO: supports names starting with "./"
 - Fortran: many MPI/IO bindings, support for MPI_UB/LB, C MPI_INT/FLOAT/DOUBLE
   datatypes.
 - smpicc/cxx/ff/f90 now will actually perform definition checks at link time. When
   building shared libraries, this may cause issues, so environment variable
   SMPI_NO_UNDEFINED_CHECK can be added to disable this.
 - most temporary files should now be created in /tmp dir (or equivalent).
   If this one does not allow execution of code (noexec flag), this may cause issues.
   Please use another tmp directory (using TMPDIR or equivalent system variable)
   in this case.

Model-Checker:
 - A large refactoring is ongoing, but this should be transparent for users so far.

XBT:
 - Drop xbt_str_split().

C binding and interface:
 - The return type of the sg_actor_on_exit() callbacks is now 'void'
   (int value was previously ignored)
 - Many C functions were renamed to follow a common naming style
   (sg_object_get_something and sg_object_set_something). As usual, the deprecated
   names are kept until version 3.30.
 - Many MSG tests were converted to the new S4U's interface in C, that
   was extended for that.

Fixed bugs (FG#.. -> FramaGit bugs; FG!.. -> FG merge requests)
 (FG: issues on Framagit; GF: issues on GForge; GH: issues on GitHub)
 - FG#41: Add sg_actor_create C interface
 - FG#43: xbt::random needs some care
 - FG#48: The Impossible Did Happen (yet again)
 - FG#50: Suspending an actor executed at the current timestamp fails
 - FG#52: Zero-seconds timeout : "That's in the past already"
 - FG#53: Crash while using ns-3 network model
 - FG#54: How to suspend a comm?
 - FG!22: Stochastic Profiles
 - FG!24: Documentation and fix for xbt/random
 - FG!35: Add a modeling hint for parallel links in doc
 - FG!36: [xbt/random] Read/Write the state of the RNG
 - FG!42: Link cumulated load plugin
 - FG!44: Test condition variable wait_until+notify_all
 - GF#18137: Allow different stack sizes?
 - GH#128: Parallelization of simulation with --cfg=contexts/nthreads
 - GH#139: Allow pthread creation in SMPI
 - GH#336: Packet-level simulation using SMPI?
 - GH#345: Error in the LMM while migrating a VM
 - GH#346: [SMPI] error while loading shared libraries: libsimgrid.so
 - GH#352: pip install / python setup.py install fail to find pybind11
 - GH!337: Fix link_energy plugin for wifi platforms
 - GH!339: Add Mailbox set_receiver method to python binding
 - GH!344: Cast hugepages macros parameters to int64

----------------------------------------------------------------------------

SimGrid (3.25) February 2. 2020 (aka 02 02 2020)

The Palindrom Day Release.

Important user-visible changes:
 - Improve the Python usability (stability and documentation).
   - A nasty synchronization bug was ironed out, see also below.
   - Python's doc was organized as a separate tree, now integrated with C++.
   - C bindings of S4U were not part of the doc.
   - The C++ doc was also improved as methods are now split by theme.
 - Further deprecate MSG: you now have to pass -Denable_msg=ON to cmake.
   - This is mandatory to use the Java bindings.
   - OFF by default; The plan is to completely remove MSG by 2020Q4 or 2021Q1.
 - SimDAG++: Automatic dependencies on S4U activities (experimental)
   - Some features are already implemented but not all of them
   - Cannot block an activity until it's scheduled on a resource
   - No heterogeneous wait_any() that would mix Exec/Comm/Io activities.
   - See examples/s4u/{io,exec,comm}-dependent for what's already there.

General:
 - Upgrade documented Java dependency to Java 8 (earlier versions don't work).
 - Drop support for Viva/Triva (old visualization tools), hence removed
   TRACE_get_node_types() and TRACE_get_edge_types() functions.

Python:
 - Require pybind11 version 2.4.
 - Greatly improve locking during context switches with Python.
   - Declaring Python callbacks to this_actor::on_exit is now working.
   - No more tests are failing currently, even on win32.

S4U:
 - Actor: Merge signals on_migration_start/end into on_host_change
 - Actor: Rename migrate() into set_host()
 - Disk: Allow users to get the read and write nominal bandwidth values
 - Exec: Implement wait_for(timeout)
 - Io: Implement wait_for(timeout)

XML:
 - Parse errors now raise a simgrid::ParseError that you may want to catch.

Kernel:
 - In simgrid::kernel::resource::Model, the methods next_occuring_event*() have
   been renamed to fix a spelling error. As usual, the previous definitions are
   kept with a deprecation warning. However, to avoid runtime errors, it is now
   forbidden to override these deprecated methods in a derived class. Please use
   the new names immediately if you need to override them.

XBT:
 - Remove unused parameter 'free_ctn' for xbt_dict_set() and xbt_dict_set_ext().
 - Drop unused functions for dicts and dynars: xbt_dict_cursor_get_elm,
   xbt_dict_get, xbt_dict_get_elm, xbt_dict_get_ext, xbt_dict_get_key,
   xbt_dict_remove, xbt_dict_reset, xbt_dynar_compare, xbt_dynar_dump,
   xbt_dynar_foreach_ptr, xbt_dynar_free_data, xbt_dynar_free_voidp,
   xbt_dynar_init, xbt_dynar_insert_at_as, xbt_dynar_merge,
   xbt_dynar_remove_n_at, xbt_dynar_replace, xbt_dynar_search, xbt_dynar_set.
 - New module: random, providing classical random numbers generators.

SMPI:
 - New option : "smpi/auto-shared-malloc-thresh" which sets a value for
   allocations' size above which they are considered "shared" by default (as if
   they were performed through SMPI_SHARED_MALLOC macros).
   Default = 0 = disabled feature.
   Note : malloc, calloc and free are now overridden by smpicc/cxx by default.
   This can cause some troubles if codes are already overriding these. If this
   is the case, defining SMPI_NO_OVERRIDE_MALLOC in the compilation flags can
   help, but will make this feature unusable.
 - Input check is now performed much more consistently and outputs precise
   warnings for each error found
 - New supported calls : MPI_File_set_view, MPI_File_get_view
 - MPI I/O now only supports disks, as storage is discontinued.
 - MPI I/O allows opening files without specifying absolute path
 - Note : SMPI configuration options are now initialized by smpi_init_options()
   call, which should be called if SMPI is not being used through smpirun.

Fixed bugs (FG#.. -> framagit bugs; FG!.. -> framagit merge requests):
 - FG#9: Python bindings crashing
 - FG#39: Missing s4u::Comm::wait_any_for example
 - FG#42: Add support for ThreadSanitizer (TSan)
 - FG!19: Removing RngStream
 - FG!20: A module for RNG calls
 - FG!21: Choice between ad-hoc and standard distributions implementations
 - FG!23: Master
 - FG!25: Fix link in Mutex doc
 - FG!26: Fix links in SMPI interface doc
 - GH#31: [MC] please provide an option to make MPI_Send asynchronous
 - GH#305: Unscheduled tasks are still excuted
 - GH#313: smpirun: manual outdated w.r.t. --help
 - GH#321: [S4U] Get task remaining work ratio
 - GH#323: Crash when an actor turn off his physical host
 - GH#335: Missing links on dragonfly example svg
 - https://lists.gforge.inria.fr/pipermail/simgrid-user/2019-November/004653.html:
   MPI_Cart_sub was not working properly. Kudos to Jonathan Borne for the report.

----------------------------------------------------------------------------

SimGrid (3.24) October 9. 2019

The Clean Disk Release.

S4U:
 - Introduce a s4u::Disk interface to manage the newly introduced <disk>
   tag. s4u::Disk is called to supplant s4u::Storage in a near future. It
   thus becomes the default resource to execute I/O operations. Examples
   and the file system plugin have been modified to use disks instead of
   storage elements. Storage can still be used but is doomed to disappear.
   Users are thus adviced to update their simulators accordingly.
 - Barrier::wait returns SG_BARRIER_SERIAL_THREAD for (only) one actor
   for consistency with pthread_barrier_wait()
 - Host::get_englobing_zone() returns the englobing netzone
 - Actor::on_destruction is now called in the destructor
   Actor::on_termination new signal called when the actor terminates
   its code.
 - Global signals are now part of the Engine:
   - on_platform_creation: after config settings, before the XML parsing
   - on_platform_created: right after the XML parsing
   - on_time_advance: each time the clock advances
   - on_simulation_end: after simulation, before cleanups
   - on_deadlock: as the name implies.
 - C bindings:
   - sg_{actor,host,link}_{data,data_set}() now all exist.
     Use them to attach user data to the object and retrieve it.

Models:
 - Introduce an experimental Wifi model. It sounds reasonable
   according to the state of the art, but it still has to be properly
   validated, at least against ns-3 if not against reality.
 - Improved the usability of ns-3. Several bugs were ironed out.
 - host_energy: Wattage was expressed as 'idle:oneCore:allCores'.
   It is now expressed as 'idle:epsilon:allCores' to properly model the
   consumption of non-whole tasks on mono-core hosts. More info in the doc.

MSG:
 - convert a new set of functions to the S4U C interface and move the old MSG
   versions to legacy (MSG_process_self*, MSG_process_{un}ref, ...)

SMPI:
 - Fortran bindings for DVFS have been removed.
 - Add support for MPI_Irsend, MPI_Rsend, MPI_Rsend_init, MPI_Bsend,
   MPI_Ibsend, MPI_Bsend_init, MPI_Buffer_attach, MPI_Buffer_detach
 - SMPI can now be selected by cmake's find_module(MPI) with
   MPI_C_COMPILER, MPI_CXX_COMPILER, MPI_Fortran_COMPILER variables.
 - Add support for MPI Errhandlers in Comm, File or Win. Default errhandler is now
   MPI_ERRORS_ARE_FATAL, so codes which were sending warnings may start failing.
 - trace-call-location can be used with TI traces, and replayed, and is compatible
   with smpi/comp-adjustment-file.
 - sleep events are now correctly traced/replayed.
 - Default for trace-call-location is now to use file names and not full paths.
   To revert to previous behavior (in case of collision of filenames), option
   "smpi/trace-call-use-absolute-path" can be set to yes.

Model-Checker:
 - Use the included xxHash as an hash implem when C++14 is usable.
 - Option model-checker/hash was removed. This is always activated now.
 - New option smpi/buffering controls the MPI buffering in MC mode.
 - MPI calls now MC_assert() that no MPI_ERR_* code is returned.
   This is useful to check for MPI compliance.

Documentation:
 - New section on plugins: how to define a new one, and existing ones.

XBT:
 - xbt_mutex_t and xbt_cond_t are now marked as deprecated, a new C interface
   on S4U is already available to replace them by sg_mutex_t and sg_cond_t.

XML:
 - Introduce the <disk> tag as a replacement of the <storage>, <storage_type>,
   and <mount> tags. The rationale is finish to decouple what should be handle
   by SimGrid kernel (i.e., resources and activities) from plugins built in
   user space (e.g., the file system plugin). This new tag currently accepts
   only three attributes (id, read_bw, and write_bw). All the other information
   that was declared with the storage related tags now has to be expressed as
   properties. An example of platform using this new tag is available at
   examples/platforms/hosts_with_disks.xml

tesh:
 - 'expect signal' can now accept more than one potential signal.

Fixed bugs (FG#.. -> framagit bugs; FG!.. -> framagit merge requests):
 - FG#28: add sg_actor_self (and other wrappers on this_actor methods)
 - FG#29 and FG#33: provide a new C API to mutexes and condition variables
 - FG#30: convert MSG_process_{un}ref to sg_actor_{un}ref
 - FG#31: per-actor data
 - FG#34: SG_BARRIER_SERIAL_THREAD?
 - FG#35: model-checker does not like buster-produced binaries
 - FG!13: MC: complete workaround in the error msg seen on modern systems
 - FG!15: execute_flops now logs compute
 - FG!16: Fix the ns-3 bindings when several flows are simultaneously finishing
 - FG!17: ns-3: unblock the right number of communications + others issues
 - FG!18: Improving the performance of the ns-3 bindings
 - GH#189: Energy consumption of parallel tasks
 - GH#219: Error in the throughput of TCP transfer
 - GH!330: Minor polishing of English: Configuring_Simgrid
 - GH!331: Fix a doc error about actors (Tutorial_algorithms)
 - GH!332: Add '-O0' flag for: cmake -DCMAKE_BUILD_TYPE=Debug
 - GH!334: Rework energy plugin, again

----------------------------------------------------------------------------

SimGrid (3.23.2) July 8. 2019

Documentation:
 - Nicer introduction page.
 - Migrate the "Deploy your application" page to the new doc.
 - Move Java as a subtree of MSG.

General:
 - Rename simgrid::TimeoutError to simgrid::TimeoutException.

XBT:
 - Drop xbt_dynar_sort_strings().

Bugs:
 - Really fix FG#26: Turning off a link should raise NetworkFailureException
 - FG#27: Wrong exception thrown to wait_any when link is turned off
 - GH#328: Java: Canceling multiple tasks in a single vm/host

----------------------------------------------------------------------------

SimGrid (3.23) June 25. 2019

The Exotic Solstice Release.

General:
 - SunOS and Haiku OS support. Because exotic platforms are fun.
 - Stop setting random seed with srand48() at initialization.
 - Use addr2line as a fallback for stacktraces when backtrace is not available.
 - Build option -Denable_documentation is now OFF by default.
 - Network model 'NS3' was renamed into 'ns-3'.

Python:
 - SimGrid can now hopefully be installed with pip.

S4U:
 - wait_any can now be used for asynchronous executions too.

XBT:
 - New log appenders: stdout and stderr. Use stdout for xbt_help.
 - Drop xbt_dict_dump.

SMPI:
 - SMPI now reports support of MPI3.1. This does not mean SMPI supports all MPI 3 calls, but it was already the case with 2.2
 - MPI/IO is now supported over the Storage API (no files are written or read, storage is simulated). Supported calls are all synchronous ones.
 - MPI interface is now const correct for input parameters
 - MPI_Ireduce, MPI_Iallreduce, MPI_Iscan, MPI_Iexscan, MPI_Ireduce_scatter, MPI_Ireduce_scatter_block support
 - Fortran bindings for async collectives.
 - MPI_Comm_get_name, MPI_Comm_set_name, MPI_Count support.

Model-checker:
 - Remove option 'model-check/record': Paths are recorded in any cases now.
 - Remove option 'model-check/sparse-checkpoint': Checkpoints are now
   always sparse. That's an immense gain in memory, and can even be
   faster because of cache effects. So there is no need to clutter the
   code to allow the user to go for the unefficient mode.

Network models:
 - Remove the lagrange-based models (Reno/Reno2/Vegas). The regular
   models proved to be more accurate than these old experiments.

Fixed bugs (FG=FramaGit; GH=GitHub -- Please prefer framagit for new bugs)
 - FG#1: Broken link in error messages
 - FG#2: missing installation documentation
 - FG#3: missing documentation in smpirun
 - FG#6: Python bindings not available on PyPI
 - FG#7: simple cmake call requires doxygen
 - FG#8: make python bindings an optional dependency
 - FG#10: Can not use MSG_process_set_data from SMPI any more
 - FG#11: Auto-restart actors forget their on_exit behavior
 - FG#12: -Denable_lto=OFF doesn't disable LTO
 - FG#13: Installs unstripped file 'bin/graphicator'
 - FG#14: Installs the empty directory 'doc/simgrid/html'
 - FG#15: Setting -Denable_python=OFF doesn't disable the search for pybind11
 - FG#17: Dead link in doc (pls_ns3)
 - FG#20: 'tesh --help' should return 0
 - FG#21: Documentation link on http://simgrid.org/ broken
 - FG#22: Debian installation instruction are broken
 - FG#26: Turning off a link should raise NetworkFailureException exceptions
 - GH#133: Java: a process can run on a VM even if its host is off
 - GH#320: Stacktrace: Avoid the backtrace variant of Boost.Stacktrace?
 - GH#326: Valgrind-detected error for join() when energy plugin is activated

----------------------------------------------------------------------------

SimGrid (3.22) April 1. 2019

The Easter Christmas Release (this one is somewhat late).

Python:
 - We are excited to introduce the SimGrid/S4U interface to your neighborhood
 - Not complete yet: asynchronous activities (amongst others) are still missing
 - Still ongoing: the interface may change in the future. We need more
   testers! Please report any glitches.
 - No new project using Java should start now. Please switch to Python.

General:
 - Some of the internal cleanups may lead to speed improvements:
   - The hard limitation on the amount of simulated actors with
     Java+Mac was removed. Now, the  available memory is the only limit.
   - Our refcounting was tidyied, leading to 10% speedups in some cases.
 - We are still working on making our code robust to the actor kills
   and hosts' churn. Things are improving, but it's not perfect yet.
 - Replaced our own code to display a backtrace (that was forking addr2line)
   with the Boost.Stacktrace library.
   You won't see your backtraces without this optional dependency.
 - Bump cmake dependency to 3.5 (provided by Ubuntu 16.04).
 - Stop setting random seed with srand() at initialization.

XML
 - In <host> and <peer>, 'availability_file' is now 'speed_file'.
   XML file version remains 4.2 since old files are still compatible.

Java:
 - Process termination which was broken at version 3.21 has been repaired.
 - Expose host load plugin: loadInit, getCurrentLoad, getComputedFlops, getAvgLoad
 - Hide the examples into examples/deprecated. New users should use Python.

MSG:
 - Drop MSG_process_create_from_stdfunc() from the API.
   This C++ function was a pimple in the C API, made necessary at some
   point by the Java bindings. This is fixed now.
 - Hide the examples into examples/deprecated. New users should use S4U.
 - MSG_process_create and MSG_process_attach now crash if the host used
   to run this process is off.
 - Fix the protype of MSG_process_on_exit()
   Now use (int,void*) callbacks instead of (void*,void*) ones.
   The implementation was ways too messy to actually work, I guess.

SMPI:
 - Change the way SMPI_SAMPLE_* macros work to avoid invalidating cache
   too often and provide more accurate timings.
 - Add -gdb, -lldb, and -vgdb shortcuts to help debug MPI codes with smpirun
 - MPI_Alltoallw support
 - Partial MPI nonblocking collectives implementation: MPI_Ibcast, MPI_Ibarrier,
   MPI_Iallgather, MPI_Iallgatherv, MPI_Ialltoall, MPI_Ialltoallv, MPI_Igather,
   MPI_Igatherv, MPI_Iscatter, MPI_Iscatterv, MPI_Ialltoallw.
 - MPI_Request_get_status, MPI_Status_set_cancelled, MPI_Status_set_elements
   support
 - Basic implementation of generalized requests (SMPI doesn't
   allow MPI_THREAD_MULTIPLE) : MPI_Grequest_complete, MPI_Grequest_start

XBT:
 - Drop sg_cmdline. Please use xbt_cmdline instead.
 - Drop the C xbt_os_mutex_t; Use the C++11 std::mutex.
 - Drop the C xbt_os_sem_t; Use the C++ xbt::OsSemaphore.
   OsSemaphore is implemented in a portable way with C++11 threads.
   This should allow much more threads to be created at the same time,
   allowing Mac and Java users to simulate many more actors.
 - Implement the 'thread' factory with std::thread instead of xbt ones.
   It is not possible to set the stack size with threads anymore, but
   -fsplit-stack is the way to go nowadays when using threads.
 - Drop the xbt_os_thread_t module (now unused)
 - Drop xbt_ex_display(), use simgrid::xbt::log_exception() instead.
 - Drop xbt_str_join_array().
 - Drop cunit, use Catch2 instead.

Kernel:
 - Many cleanups in the kernel::activity namespace. This was long
   overdue, and shall open the path to many future endeavors.

Fixed bugs:
 - #132: Java: a process can not shut down its own host
 - #220: S4U: detached send causes exception if sender terminates soon after sending
 - #261: Document the parameters of parallel execution's constructor
 - #300: [s4u] BarrierPtr is missing
 - #314: SMPI args internal cleanup
 - #316: Fix a bug related to the CPU utilization of multi-core VM
 - #318: Invalid trace file when using option --cfg=tracing/smpi/display-sizes:yes
 - #324: S4U: Attempting to create an actor on turned off host segfaults instead of throwing
 - #325: Turning off a host has different behavior on sleeping actors and computing actors

----------------------------------------------------------------------------

SimGrid (3.21) October 3. 2018

The Restarting Documentation (TRD) Release.

Documentation:
 - Convert the user manual to Sphinx for improved usability.
   Unstable version now hosted on https://simgrid.frama.io/simgrid
   Many glitches remain; stay tuned.
 - Restrict the Doxygen reference API to the installed header files.
   (documenting all internals this way is overkill + doxygen scales badly)
 - New tutorial on S4U (highly inspired from the old MSG one, but with
   a git repository to fork as a starting point, and a docker image)
 - Started but not finished an SMPI tutorial inspired from the JLPC'14 one.
 - The Developper manual is still to be converted (not compiled until then)
 - Some parts are still missing in this conversion (such as the
   platform and deployment sections) while others were blindly converted
   and would need more love (such as the configuration flags).
   Things will certainly further improve in the future releases.

S4U new features:
 - Fully reimplement auto_restart mechanism that was utterly broken
   (fix #22, #131 and #281 that were all very related)
 - Implement semaphores (fix #303 and #291)
 - When creating an actor from a function and its parameters,
   move-only parameters are not allowed anymore, as it would prevent
   the actor to be restartable if its parameters are consumed on run.
 - s4u::Io: IOs go asynchronous as activities. New methods in s4u::Storage:
     - io_init(sg_size_t, s4u::Io::OpType) to create a READ or WRITE asynchronous
       IO operations that can be started, waited for, or canceled as a regular
       activity.
     - read_async(sg_size_t) and write_async(sg_size_t) which are wrappers on
       io_init() + start()

Tracing:
 - Rename 'power' and 'power_used' variables into 'speed' and 'speed_used'
 - New host variable: 'core_count'

XBT:
 - Remove xbt_os_thread_specific features
 - Remove portability wrapper to condition variables
 - Remove xbt_os_thread_yield()

SMPI:
 - MPICH collective selector now mimics MPICH 3.3b
 - OpenMPI collective selector now mimics OpenMPI 3.1.2 (default "tuned" setting)
 - MPI_Init(NULL,NULL) is now allowed
 - smpi/wtime option now injects time in gettimeofday or clock_gettime calls
 - Command-line arguments should now be handled properly in Fortran simulations
 - MPI Attributes and related callbacks should work in Fortran
 - Apps using C + Fortran should now work
 - MPI_* calls now check for non MPI_SUCCESS return values and emit warnings
 - Support MPI_Error_String

Java:
 - Due to an internal bug, Msg.run() must now be your last line.
   We hope to fix it in a future release, and we are sorry for the inconvenience.

Fixed bugs:
 - #22: Process autorestart seem to only work with CAS01 cpus
 - #56: Feature request: dynamic SMPI replay
 - #93: simgrid should not eat --help
 - #111: How to change the loopback link characteristics?
 - #116: Platform cluster radical
 - #117: Platform cluster/host order
 - #129: Replay_multiple on steroid
 - #131: Java : autostart does not work
 - #143: Setting a breakpoint at a given time
 - #235: Network energy models should be integrated
 - #264: Add ptask L07 resource tracing
 - #271: Dynamic and manual replay of SMPI traces
 - #279: Breakpoints option uses time deltas instead of absolute time
 - #281: Daemonized actor no longer daemonized after an auto-restart
 - #282: TIT convertor erase traces when using absolute path in the trace list file
 - #285: segfault when a s4u actor kills itself with msg process tracing activated
 - #286: PajÃ© traces are not exposing the number of cores
 - #287: Command-line parsing should stop when encountering '--'
 - #288: MPI_Init(NULL, NULL)
 - #289: Improve documentation of Actor::on_destruction and this_actor::on_exit()
 - #290: Method to check if a mailbox has a message ready to be consumed
 - #291: [s4u] semaphores do not seem available yet
 - #294: Alltoall collective implementation of mpich
 - #295: Starting a Host as OFF is not supported
 - #296: DTD too permissive
 - #299: Add a s4u barrier example

----------------------------------------------------------------------------

SimGrid (3.20) Released June 24. 2018

The proxy snake_case() release.

S4U:
 - The whole API is now using snake_case() instead of mixing it with camelCase.
   Compatibility wrappers in place for one year.
 - We took the opportunity to increase the consistency of the API.
   Please report any remaining glitches.
 - New function simgrid::s4u::Host::get_actor_count:
   Returns the number of actors running on a specific host.

SMPI:
 - SMPI is now tested with ~45 proxy apps from various sources, with none or
   only minor patching needed: check https://github.com/simgrid/SMPI-proxy-apps
 - Replay: The replay file has been re-written in C++.
 - Replay: Tags used for messages sent via MPI_Send / MPI_Recv are now
   supported. They are stored in the trace and used when replayed.
 - Basic support of MPI_Cancel. Robustness not guaranteed.
 - Support of MPI_Win_allocate_shared, MPI_Win_shared_query, MPI_Comm_split_type
   (only for MPI_COMM_TYPE_SHARED).
 - New option: smpi/privatize-libs, to add external shared libs to be privatized
   by SMPI. They will be copied locally and loaded separately by each process.
   Example --cfg=smpi/privatize-libs:"libgfortran.so.3;libscalapack.so".
 - Tracing: add tracing for MPI_Start, Startall, Testall, Testany
 - Interception of getopt, getopt_long and getopt_long_only calls to avoid issues
   with internal index optind with multiple processes. Only works if MPI_Init has
   already been called.
 - Fortran: SMPI builds a mpi.mod file which should allow use of "use mpi"
   syntax without preprocessing tricks.

TRACE
 - Change --cfg=tracing/msg/vm to --cfg=tracing/vm as virtual machine
   behavior tracing is no longer limited to MSG
 - TIT (Time Independent Traces): We finally support tags. Unfortunately,
   this means that traces now need to be updated or re-obtained; both Irecv
   and Isend lines in your traces have now in total 5 mandatory fields:
      <rankid> <command> <to/from rankid> <tag> <size>
   To update your traces, it suffices to add a 0 for the tag here.
 - TIT now also supports waiting for a distinct request via MPI_Wait.
   Wait/Test now wait for a specific request, not just the last one that was
   issued. This unfortunately means another update, because we need to
   identify which request you want to wait for. We do this via the
   triplet (sender, receiver, tag), which needs to be added:
      <rankid> <command> <sender> <receiver> <tag>
 - Actions are now in lower case (e.g., "allReduce" becomes "allreduce").
   New script simgrid_convert_TI_traces.py: upgrade your TI traces.

MSG
 - The deprecation of MSG is ongoing (but this should not impact you).
   Many MSG functions are now simple wrappers on the C API of S4U. If
   you wish to convert your code to S4U, find the S4U counterparts of
   your MSG calls in src/msg/msg_legacy.cpp.
 - MSG can still be used, but won't evolve anymore.

Plugins:
 - Allow to run the Link energy plugin from the command line with
   --cfg=plugin:link_energy
 - Rename Energy plugin into host_energy
 - Rename Load plugin into host_load

Simix:
 - Add parameter --cfg=simix/breakpoint to raise a SIGTRAP at given time.
 - kill simix::onDeadlock() that was somewhat dupplicating s4u::on_deadlock()
 - Improve performance when handling timeouts of simix synchros.

XBT:
 - Config: the C API is now deprecated (will be removed in 3.23), and
           the C++ API has been slightly improved.

Other:
 - Fix several build issues on OSX.
 - Move simgrid_config.h to simgrid/config.h (old header still working)

Fixed bugs:
 - #143: Setting a breakpoint at a given time
 - #150: Inconsistent event names in SMPI replay
 - #258: daemonized actors hang after all non-daemonized actors have completed
 - #267: Linker error on unit_tmgr
 - #269: SMPI: tracing of MPI_Wait/all/any broken
 - SMPI: Fix various crashes with combined use of MPI_PROC_NULL and MPI_IGNORE_STATUS

----------------------------------------------------------------------------

SimGrid (3.19.1) Released March 22 2018

 The Fixed ABI Release.

 As you may know, we are currently refactoring SimGrid in deep.
 Upcoming SimGrid4 will be really different from SimGrid3: modular,
 standard and extensible vs. layered, homegrown and rigid. C++ vs. C.

 Our goal is to smooth this transition, with backward compatibility
 and automatic update paths, while still progressing toward SimGrid4.

 SimGrid remains open during works: The last pure SimGrid3 release was
 v3.12 while all subsequent versions are usable alpha versions of
 SimGrid4: Existing interfaces remain unchanged, but the new S4U
 interface is budding and the internals are deeply reorganized.

 Since 2015, we work hard to reduce the changes to public APIs. When
 we need to rename a public library symbol in S4U, we let your
 compiler issue an explicative warning when you use the deprecated
 function. These messages remain for four releases, i.e. for one full
 year, before turning into an error. Starting with v3.15, your can
 also adapt to API changes with the SIMGRID_VERSION macro, that is
 defined to 31500 for v3.15, to 31901 for v3.19.1 and so on.

 Starting with this v3.19.1, our commitment to reduce the changes to
 the public interfaces is extended from the API to the ABI: a program
 using only MSG or SimDag and compiled against a given version of
 simgrid can probably be used with a later version of SimGrid without
 recompilation. We will do our best... but don't expect too much of
 it, that's a really difficult goal during such profund refactoring.

 The difference between v3.19 and v3.19.1 is that the former was
 accidentally breaking the ABI of MSG, while the later is restoring
 the previous ABI.

 S4U and kernel APIs will still evolve until SimGrid4, with one-year
 deprecation warnings as currently. In fact, cleaning up these
 interfaces and converting them to snake_case() is one release goal of
 v3.20. But don't worry, we are working to smooth this upgrade path.

 In summary, new projects should start with S4U to benefit of the
 future, but old MSG projects should still be usable with no change.

----------------------------------------------------------------------------

SimGrid (3.19) Released March 20 2018

 The Moscovitly-cold Spring release.

 SMPI user-visible improvements:
 - Support of MPI_Type_create_subarray
 - Unimplemented MPI calls now abort (instead of issuing a warning)
   Some harmless calls around errhandlers still only issue a warning.
 - MPI_Sendrecv was behaving badly when MPI_PROC_NULL was sender or receiver.
 - Starting MPI ranks (or even MSG/S4U actors) once the simulation started
   is now possible (mmap privatization was refactored to this end).
   Adding new SMPI instances should also be technically doable now.

 SMPI internal cleanups:
 - Removed index notion from SMPI -- no more "getPid() - 1"!
   In tracing files, actors are called rank-<PROCESS-ID> but these are
   NOT the real ranks (tracing several communicators is not supported yet).
 - Deprecate smpi_process_index() (will be removed in 3.22)
 - Better testing on classical proxy apps, through an external project:
   https://github.com/simgrid/SMPI-proxy-apps/

 Documentation
 - Use a graphical TOC to make it easier to find the documentation you need
 - Revamp the MSG tutorial

 MSG
 - Fix MSG_task_get_remaining_work_ratio(): return 1.0 for unstarted tasks.
 - Remove parameter of MSG_process_killall().
   Resetting the PID was bogus anyway (several actors could have the same PID).

 S4U
 - Execution->setHost() can be called after start(), to migrate it.
 - Comm::test_any() is now implemented.
 - s4u::Actor now has onCreation() and onDestruction() signals.
 - Install some kernel header files for the users' plugins and more.
   Warning, their API is really not stable yet.
    include/simgrid/kernel/resource/{Action,Resource,Model}.hpp
    include/simgrid/kernel/routing/*Zone.hpp

 SimDag
 - SD_task_dependency_add(): remove unused parameters 'name' and 'data'.

 Build System and other cleanups:
 - Remove unused run-time parameter "tracing/onelink-only".
 - SimGrid now works with intel compilers (MC still buggy)
 - Remove XBT_LOG_CONNECT, it should be useless nowadays.
 - tesh kills subprocesses on timeout (but not on windows)

 PLATFORM:
 - Rename FULLDUPLEX into SPLITDUPLEX (old name still accepted)

 Fixed bugs:
 - #194: Feature request: simgrid::s4u::Comm::test_any()
 - #245: migrating an actor does not migrate its execution
 - #253: Feature Request: expose clusters as objects
 - #254: Something seems wrong with s4u::Actor::kill(aid_t)
 - #255: Tesh broken on Windows
 - #256: Modernize FindSimGrid.cmake
 - #257: Fix (ab)use of CMake install

----------------------------------------------------------------------------

SimGrid (3.18) Released December 24 2017

 The "Ho Ho Ho! SimGrid 4 beta is coming to town" release.

 MSG IS NOW DEPRECATED. Please use S4U for new projects.
 - Support for MSG should not be removed from SimGrid before 2020,
   but future evolutions will be limited to the integration of
   user-provided patches.

 S4U New features
 - s4u::onDeadlock() signal, run before stopping the simulation.
 - s4u::Exec: asynchronous executions (abstraction of background
   threads)
 - s4u::Host->getLoad() returns the achieved speed in flops/s

 S4U API changes
 - Link::name() is deprecated and will be removed in v3.21, use
   Link::getCname() instead.
 - Mailbox::getName() changed to return a std::string, use
   Mailbox::getCname() instead to get a char*.
 - Storage::getName() changed to return a std::string, use
   Storage::getCname() instead to get a char*.
 - s4u::allStorages() becomes s4u::getStorageList(whereTo)
   to have both allocation and deallocation of the map in user space.

 MSG
 - Forbid the use of MSG_task_get_flops_amount() on parallel tasks:
   The amount of flops remaining to do is a vector, not a scalar.
 - Introduce MSG_task_get_remaining_work_ratio(), which does what its
   name implies on both sequential and parallel tasks.
 - Both changes fix GitHub's #223 using PR #237 as a basis.
   Thanks Michael Mercier.
 - Most examples were converted to S4U and hidden elsewhere at tests.
   Rationale: we still want MSG to work; we want newcomers to use S4U.

 SURF
 - LMM stuff moved to its own namespace: simgrid::kernel::lmm.
 - Renamed LMM classes (e.g. s_lmm_system_t -> System).

 SMPI
 - Switch to the faster dlopen privatization mechanism by default
 - Documentation improvments

 Virtual Machines
 - Live migration is getting moved to a plugin. Dirty page tracking is
   the first part of this plugin. This imply that VM migration is now
   only possible if one this function is called:
    - C/MSG: MSG_vm_live_migration_plugin_init()
    - C/C++: sg_vm_live_migration_plugin_init()
    - Java:  Msg.liveMigrationInit()
   For C and C++, "simgrid/plugins/live_migration.h" also has to be
   included.

 XBT
 - Define class simgrid::xbt::Path to manage file names.
 - Removed unused functions:
   - xbt/file.h: xbt_basename(), xbt_dirname(), xbt_getline()
   - xbt/graph.h: xbt_graph_edge_get_length(), xbt_graph_edge_set_length,
       xbt_graph_export_graphviz()
   - xbt/str.h: xbt_str_join()
 - Remove unused datatypes:
   - xbt/heap.h: use std::priority_queue or boost::heap instead
   - xbt/swag.h: use boost::intrusive::list instead

 PLUGINS:
 - New link_energy plugin for the consumption of the links.
 - All of the operations on files and storage contents have been
   packaged into a plugin (src/plugins/file_system). The current
   public interface can be found in
   include/simgrid/plugins/file_system.h
   To use these functions you now have to initialize the plugin by
   calling MSG_storage_file_system_init() just after calling
   MSG_init() or sg_storage_file_system_init() just after creating
   the Engine.

 XML
 - Remove the undocumented/untested tag <include>

 TRACE
 - Remove viva specific tracing as the tool is no longer maintained

 Fixed bugs:
 - #248: Kill of finished processes leads to segfault
 - #240: xbt_cond_wait_timeout should gracefully return for C apps
 - #239: please implement signal s4u::onDeadlock()
 - #230: segfaults when exit() without run()
 - #225: s4u::Actor::kill() doesn not really kill victims in a join()
 - #223: MSG_task_get_flops_amount() not working with parallel tasks
 - #222: Actor::kill() doesn't really kill and segfaults
 - #221: odd LMM warning when killing an actor
 - #120: Memory leak when the processes are forcefully killed

----------------------------------------------------------------------------

SimGrid (3.17) Released October 8 2017

 The Drained Leaks release: (almost) no known leaks despite the tests.

 Even very long simulations will preserve your memory: our testsuite
 stresses SimGrid for over 45mn on fast machines for a coverage of
 over 80%, and there is only one single known leak, of about 4kb.


 S4U
  - Comm.detach(): start and forget about asynchronous emission. A cleanup
    handler may be given to free resources if the comm cannot be completed.
  - this_actor::send(mailbox) is now mailbox->put()
  - New: simgrid::s4u::Comm::wait_all()
  - New: Host.execute() for remote executions.

 SURF
  - Unused option network/sender-gap is removed.

 MSG
  - Deprecate MSG_task_isend_with_matching(): This unused feature
    really complicates our internals. Will be removed in v3.20.

 Simix
  - Improved context termination.  It is now possible to free resources, even
    when a process is forcibly killed.
  - ContextBoost: add support for Boost versions above 1.61.

 XBT
 - Bring back run-time option --cfg=exception/cutpath to remove exception
   backtraces.
 - Removed unused functions:
   - xbt/str.h: xbt_str_split_str(), xbt_str_subst(), xbt_str_ltrim(),
       xbt_str_rtrim(), xbt_str_trim().
   - xbt/xbt_os_thread.h: xbt_os_thread_cancel(), xbt_os_thread_detach().

 Misc
 - Removed header files obsolete since SimGrid 3.12:
   msg/datatypes.h, msg/msg.h, simdag/datatypes.h, simdag/simdag.h.
 - Fix many bugs:
   - #3: SD_exit should be made optional
   - #120: Memory leak when the processes are forcefully killed
   - #159: Threading test regression in Actor refcounting
   - #170: simgrid::s4u::Comm::wait_any() returns too many comms
   - #185: simgrid::s4u::Engine::instance()->shutdown() segfaults
   - #186: Actor::killAll() segfaults if some process is blocked on wait()
   - #191: VM migration and pstate
   - #192: Updating the energy consumptions of all hosts crashes with VMs
   - #195: All actors have PID=0 in the logs
   - #204: Sometimes segfault with thread contexts and mmap privatization
   - #222: Actor::kill() doesn't really kill and segfaults
   - #225: Actor::kill() doesn't really kill when victims are doing a join()

----------------------------------------------------------------------------

SimGrid (3.16) Released June 22. 2017.

 The Blooming Spring Release: developments are budding.

 Portability status:
  - FreeBSD: Disable SMPI mmap privatization, switch automatically to dlopen.
  - Mac, BSD: dlopen+thread broken, switch automatically to raw contexts.
  - Java JAR file should be finally fully working on Mac OSX too.

 XML platforms: Switch to platform v4.1 format.
 * This is (mainly) a backward compatible change: v4 are valid v4.1 files
   - <zone> can be used as a synonym for the now deprecated <as>
   - <zoneRoute> can be used as a synonym for the now deprecated <asroute>
   - <bypassZoneRoute> can be used as a synonym for the now deprecated <bypassAsRoute>
   - <actor> can be used as a synonym for the now deprecated <process>
   - state_file and avail_file periodicity is now easier to express
     (check the documentation) the old behavior should still work.
 * Storage: not backward compatible, but it seems that nobody ever used it
   - Remove attribute 'content_type' of <storage_type>: was never used
   - Make attribute 'model' of <storage_type> optional: for future usage
   - Remove Bconnection model property: was never (in)validated. Replaced by
      the maximum of the read and write bandwidth as a resource constraint.

 SimDag
  - New and Backwards Compatibility break:
    SD_simulate_with_update (double how_long, xbt_dynar_t changed_tasks_dynar)
    When one wants to get the list of tasks whose states have changed during a
    simulation round, s/he has to allocate and free a dynar and use it as
    argument to this function. The former SD_simulate (double how_long)
    now returns void.

 Virtual Machines
  - Allow multicore VMs, with the correct sharing (unless you overcommit)
    BUG: vCPU overcommitting still leads to buggy sharing, though. WIP.

 Energy
  - New function to update the consumption of all hosts at once.
  - Fix the model for multi-core hosts, linear in the amount of busy
    cores with an abnormality for pIdle (see paper).
    BUG: Still not satisfactory for ptask on mono-cores.

 MSG
  - The netzone are now available from the MSG API.
    The old names still work, but are now deprecated.

 SMPI
  - New algorithm to privatize globals: dlopen, with dynamic loading tricks
  - New option: smpi/keep-temps to not cleanup temp files
  - New option: smpi/shared-malloc-blocksize . Relevant only when global shared
    mallocs mode is used, allows to change the size of the fake file used
    (default 1MB), to potentially limit the number of mappings for large runs.
  - Support for sparse privatized malloc with SMPI_PARTIAL_SHARED_MALLOC()
  - Fortran ifort and flang compilers support
  - New RMA calls supported (experimental):
      - MPI_Win_allocate, MPI_Win_create_dynamic, MPI_Win_attach
      - MPI_Win_detach, MPI_Win_set_info, MPI_Win_get_info
      - MPI_Win_lock_all, MPI_Win_unlock_all, MPI_Win_flush
      - MPI_Win_flush_local, MPI_Win_flush_all, MPI_Win_flush_local_all
      - MPI_Op_commutative, MPI_Fetch_and_Op, MPI_Compare_and_swap
      - MPI_Rput, MPI_Rget, MPI_Raccumulate, MPI_Rget_accumulate

 S4U
  - New: this_actor::isMaestro() returns whether we are in kernel mode.
  - Behind the scene, ActivityImpl are now automatically refcounted.
    Removing this nasty bottleneck will greatly simplify our internals.

 XBT
  - Replay: New function xbt_replay_action_get():
    Retrieve the function previously associated to an event type.
  - DROPPED FUNCTION: xbt_str_varsubst()
  - DROPPED MODULE: strbuff. We don't need it anymore.
  - DROPPED MODULE: matrix. We don't need it anymore.
  - DROPPED MODULE: lib. We don't need it anymore.

 -- Thu Jun 22 22:48:12 CEST 2017   -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid (3.15) Released March 22. 2017

 The Spring Release: continuous integration servers become green
 We fixed even the transient bugs on all target architectures:
   Linux (CentOS, Debian, Ubuntu, Fedora), Mac OSX (Mavericks, El Capitan)
   Windows, FreeBSD, NetBSD.

 - Rename NetCards to NetPoints.
   This was intended to help NS3 users, but that's not a netcard.
   That's a point in the routing algorithm, let's avoid wrong simplifications.

 MSG
 - New: MSG_process_yield(). Stop and yield to other processes.
 - New: MSG_process_daemon(). Daemon processes are automatically killed
   when the last non-daemon process terminates
 - New: MSG_process_ref/unref(). Fiddle with the process refcounting.
 - Renamed MSG_energy_plugin_init() -> MSG_host_energy_plugin_init()
   to make room for the upcoming network energy plugin.
 - Drop MSG_host_get_current_power_peak: duplicates MSG_host_get_speed

 Java
 - Ensure that an actor can kill itself with Process::exit()
 - Kill the obscure NativeException. Nobody want to survive the issues
   it denotes, so use JniException that is a RuntimeException (not to
   be caught explicitly).
 - Partial bug fix in initialization. SimGrid flags on command line were
   consumed at C level but stayed in the original Java String[] args.
   This could mess users' args[i] if SG flags were not put at the end of
   the command line.
   The SimGrid flags are now removed from the Java arguments. However,
   the number of arguments REMAINS UNCHANGED. It is then UNSAFE to test
   if args.length is greater than the number of YOUR OWN ARGUMENTS.
   It might be if you have --log or --cfg flags in the command line.
 - Fix numerous memleaks all around the place. In particular, around VMs.

 S4U
 - New callbacks:
   - s4u::onPlatformCreated: right before the simulation starts
   - s4u::onSimulationEnd: right after the main simulation loop
   - s4u::onTimeAdvance: right after a clock change (time is discrete)
   - s4u::Host::onSpeedChange: when the pstate is changed, or when an
     event from the availability_file changes the avail speed.
 - Links are now usable from s4u
 - New: Engine::hostList() and Engine::hostCount(). Still clumsy.
 - New: Actor::suspend(), Actor::resume(), and Actor::migrate(new_host)
 - New examples: The conversion of MSG examples to S4U has begun
    - Actors: create, kill, migration, and suspend
    - Applications: master-worker and token-ring
    - Action replay: communications and storage
 - Drop Host::getPstateSpeedCurrent() which duplicates Host::speed()

 SimDag
 - Backwards Compatibility breaks
    - The SD_route_get_list and SD_route_get_size functions have been removed.
      They are replaced by the unique
         void sg_host_route(sg_host_t src, sg_host_t dst, xbt_dynar_t links)
      The route from src to dst is built in the links dynar whose size can
      be obtained with xbt_dynar_length.
    - The SD_route_bandwidth and SD_route_latency functions have been replaced by
        sg_host_route_bandwidth and sg_host_route_latency.
      Macros ensure the backwards compatibility, but you should fix your code

 SMPI
 - Major C++ rewrite ongoing (SMPI used to be C compiled in C++).
   This can break codes using SMPI internals (from private.h instead of the public smpi.h).
 - Bump our claim of support from MPI 1.1 to MPI 2.2.
   We don't support 100% of it, but it should be enough. Contact us if not.
 - MPI_Win_lock/unlock, MPI_Get_accumulate support added (as for all RMA, implementation is
   naive and probably inaccurate)
 - New algorithm for SMPI_SHARED_MALLOC: global, where all blocks are
   mapped onto a unique small file using some system magic.
 - Bugfix: smpirun was sometimes misusing hostfile when wrongly terminated
 - Fortran: cleanups, fixes, support of user-added operations
 - RMA: MPI_Accumulate are applied in correct order.
 - RMA:  MPI_Win_{complete/post} shouldn't miss messages anymore.
 - Better support for MPI_IN_PLACE
 - Support for MPI_Win attrs and keyvals.
 - Support MPI_Comm_group_create, MPI_Type_size_x
 - MPI ops should be properly applied to all allowed types
 - Replace implementation of MPI_Bcast "scatter followed by rdb allgather"
   algorithm by a non failing one from mpich.

 XBT
 - Kill the fifo data container: we don't use it anymore.

 XML
 - A <cluster> can now be created with different speed values to represent pstates.
   see examples/platforms/energy_cluster.xml for an example.

SimGrid (3.14.159) Released December 28. 2016

 The previous release was only a crude approximation of a Pi release;
 this one should be a bit better.

 - Revert a last minute change that broke on Mac OSX.
 - Fix the changelog and NEWS files.
 - Improve the documentation, in particular of the routing module.
 - Integrate some patches flying around in Debian.

SimGrid (3.14) Released December 24. 2016

 Documentation
 * The whole documentation was reworked and reorganized. There is
   still much room for improvement here, but we're on it.

 Infrastructure
 * We now need python3 for our testing infrastructure.
 * Model checking needs libevent

 MC
 * Now works on FreeBSD

 SMPI
 * Privatization now works on FreeBSD

 * Privatization is now activated by default in smpirun
   You can turn it off with -no-privatize if something goes wrong.

 * Call-location tracing for SMPI.
   You can add the exact location (filename / linenumber) of an MPI call to
   your trace files and slow down or speed up the simulation between two
   consecutive calls by using an adjustment file (see the documentation).

 * Fixed computation of timings for MPI_Send, MPI_Recv & possibly also others
   We've found a bug that prevented SMPI to account for MPI_Send, MPI_Recv
   and others (in some cases) in a correct way. That is, the smpi/os, smpi/or
   values were ignored in some cases. The timings of these functions can now
   be significantly different.

 * smpi/cpu-threshold:-1 should become smpi/simulate-computation:no
   smpi/running-power    is renamed to smpi/host-speed

 * smpi/grow-injected-times option to enable or disable multiplication of the
   timings injected in MPI_Iprobe, or MPI_Test. Enabled by default, which can
   make simulation less precise (but also much faster).

 * smpirun script should be (much) faster for large deployments.

 * SMPI tracing: fixed issue with poor matching of send/receives.

 * Replay: Fix broken waitall

 New functions and features
 * MSG_parallel_task_execute_with_timeout, to timeout computations.

 Dropped / renamed functions and features
 * msg_mailbox_t and associated functions. Use s4u::Mailbox instead.
   - MSG_mailbox_is_empty() -> Mailbox::empty()
   - MSG_mailbox_front() -> Mailbox::front()
   - MSG_mailbox_get_by_alias() -> simgrid::s4u::Mailbox::byName(name)
   - MSG_mailbox_get_task_ext() -> MSG_task_receive_ext()
   - MSG_mailbox_get_task_ext_bounded -> MSG_task_receive_ext_bounded
   - MSG_host_(get/set)_params -> MSG_vm_(get/set)_params
 * Don't pass the free_f parameter to property related functions:
   - MSG_host_set_property_value()
   - MSG_as_router_set_property_value()
   - MSG_storage_set_property_value()
 * VM properties. Since msg_vm_t are msg_host_t, just use
   MSG_host_get_property_value() and friends
 * VM I/O related things:
   - Ignored parameter of vm_create: core_nb, disk_path and disk_size.
   - Unimplemented save/restore methods
 * MSG_as_router_get_property_value() was redundant with
   MSG_environment_as_get_property_value().
   - Removed MSG_as_router_*propert*() functions
   - Added MSG_environment_as_set_property_value() for consistency
 * xbt heterogeneous dictionaries (created with xbt_dict_new()).
   Well, they are still there for now, but deprecated with a warning.
   Please switch to xbt_dict_new_homogeneous() before this is removed
   for real.
 * Task affinity. Its intended behavior (that was very badly tested
   and probably not really working) was deceiving what most users
   would have hoped here.
 * xbt_os_sem_get_value: unused internally, deprecated on OS X El Capitan
 * Option network/coordinates is now useless and should be dropped.

 Storage:
 * Added option storage/max_file_descriptors to allow more than 1024 files opened

 SURF:
 * Added option maxmin/concurrency_limit to allow more than 100 processes per host
 * Added Dragonfly topology support

 XML:
 * Add Exa- and Peta- units such as EiB, EB, Eib, Eb for size, and
   EiBps, EBps, Eibps, Ebps for bandwidth.
   They may become useful to some lucky ones.

 Java:
 * New functions: msg.Comm.waitAll() and msg.Comm.waitAny()
 * ex/app_tokenring: new example, very similar to the MSG Token Ring
 * ex/async_waitAll: new example, on asynchronous communications

 MSG:
 * Memory usage should be decreased for simulations with a large number
   of processes. This also helps for SMPI.

SimGrid (3.13) stable; urgency=low

 The Half Release, a.k.a. the Zealous Easter Trim.

 - We removed half of the lines, that were mostly experimental cruft.
   v3.12 lasted 286000 lines of code, v3.13 is only 142000 lines
   (not counting blanks and comments -- according to openhub.net)
 - The internals are now compiled in C++ (and will soon be clean C++)
 - We removed 75 klines of XML, 12 klines of Java, 5 klines of cmake,
   59 klines of C, etc. We added only 29 klines of C++ in replacement.

 * Backwards Compatibility breaks
   - Removed Lua simulation bindings (switch to C or Java for that).
     Lua can still be used to describe platforms
   - Removed Java kernel plug-ins.
     Will be reintroduced after the ongoing major internals reorg.
   - In MSG
      - the following functions were removed.
        They were too specific and should be reimplemented in a generic
        way, with filter function.
          - MSG_task_listen_from_host
          - MSG_mailbox_get_count_host_waiting_tasks
          - MSG_mailbox_put_with_timeout was removed.
            Please use MSG_task_send_with_timeout instead.
   - In SimDag
      - the SD_application_reinit function was removed. It has been a noop for a while.
      - The ACCESS_MODE of SD_workstation has been removed. This feature was not really usable and should soon be
        replaced by a more flexible mechanism.
      - The following functions thus do not exist anymore
         - SD_workstation_get_access_mode
         - SD_workstation_set_access_mode
         - SD_workstation_get_current_task
      - Basic estimation functions have been removed but can easily be replaced
        - SD_route_get_communication_time => SG_route_get_latency() + amount / SD_route_get_bandwidth()
        - SD_workstation_get_computation_time => amount / sg_host_speed()
   - In Java
      - VM.setBound(int load) is now VM.setBound(double bound) to meet the MSG semantics.
        Use VM.getSpeed()*load/100 for the legacy behavior.
   - In CMake
      - option enable_tracing was removed. It was not doing anything for a while.
   - In the ModelChecker:
      - the model-checker now ptraces the model-checked process which means
        you cannot use a debugger on the latter anymore (we might make this
        optional in the feature);
      - removed soft-dirty page tracking;
      - remove model-checked side snapshot management,
        MC_snapshot() and MC_compare_snapshot();
      - keep the MC_cut() function as a stub (it was not really working
        in the previous release).

 Options:
 * All options are consistently in kebab-case. Old names are kept as alias.

 XML platforms:
 * Switch to platform v4 format.
   - Rename from 'power' to 'speed' the attributes describing the amount of
     flops that a <host>, <peer>, <cluster> or <cabinet> can deliver per second.
   - In <trace_connect>, attribute kind="POWER" is now kind="SPEED".
   - In <host> and <link>, attributes availability and state are gone.
     It was redundant with state and availability traces, and with peak values.
   - In <cluster>, attributes availability_file and state_file are gone.
     It was too complex and unused.
   - Kill <gpu>. Was not doing anything.
   - The DOCTYPE points to the right URL:
     http://simgrid.gforge.inria.fr/simgrid/simgrid.dtd
     (the file at this address now documents the changelog since its v1)
   - A warning is emitted for unit-less values (they are still accepted).
     - speed. Default: 'f' or 'flops'. Also defined:
        'Yf',         'Zf',         'Ef',       'Pf',        'Tf',        'Gf',        'Mf',        'kf'
        'yottaflops', 'zettaflops', 'exaflops', 'petaflops', 'teraflops', 'gigaflops', 'megaflops', 'kiloflops'
     - bandwidth. Default: 'Bps' bytes per second (or 'bps' for bits but 1 Bps = 8 bps)
       Also defined in bytes: 'TiBps', 'GiBps', 'MiBps', 'KiBps', 'TBps', 'GBps', 'MBps', 'kBps', 'Bps'
       And the same in bits:  'Tibps', 'Gibps', 'Mibps', 'Kibps', 'Tbps', 'Gbps', 'Mbps', 'kbps', 'bps'
     - latency. Default: 's' second. Also defined:
       'w' week, 'd' day, 'h' hour, 'm' minute, 'ms' millisecond, 'us' microsecond, 'ns' nanosecond, 'ps' picosecond

 * bin/simgrid_update_xml can upgrade your files automatically (won't convert unit-less values)
   tools/sg_xml_unit_converter.py may help (but it's just a warning and will probably ever be).

 S4U
 * s4u::Host is now the preferred public interface to the Host features.
   sg_host_* functions are C bindings to the exact same behavior
   MSG_host_* and SD_workstation_* are #define to the sg_host_* ones

 MSG
 * The examples were completely reorganized (in C and Java), for your browsing pleasure.
 * Kill all deprecated functions (the ones you had when declaring MSG_DEPRECATED).
   They were deprecated since a few years, and probably did not even compile anymore.

 SimDag
 * The API has been profoundly modified to directly use the core objects instead of redefining its own.
   SD_Workstation_t and SD_link_t are now sg_host_t and sg_link_t respectively.
   Some functions have also been renamed for consistency. Backward compatibility is maintained, but users are
   encouraged to update their codes. A list of the modified functions can be found at the end of
   include/simgrid/simdag.h

 Simix
 * simgrid::simix::kernelImmediate() is the closure callback. It ensures that
    the lambda or closure passed as a parameter will run in kernel mode.
   All the callback functions should be rewritten to that interface at some point.

 Surf
 * Reorganizing and cleaning the internals all around the place.

 SMPI
 * Remove old default barrier/bcast buggy algorithms (see #18407)
 * Various bug fixes to handle more codes
 * Remove the need for the --foreground option of smpirun (it is still
   accepted for backward compatibility).

 XBT
 * Kill the setset data container: MC don't use it anymore.
 * Kill the queue data container: it made more sense with GRAS.
 * Kill the xbt_peer_t data type: it's useless without GRAS.
 * Kill rm_cb feature of config sets: it was never useful.
 * Kill graphxml parsing feature. It was not used.
 * Kill the deprecated code protected by XBT_USE_DEPRECATED
 * New functions:
   - xbt_dynar_sort_strings(), when the content is char*
   - xbt_str_parse_int / xbt_str_parse_double, wrapping strtol/strtod
     They throw exceptions on invalid input;
 * C++ support for declaring CLI flags (simgrid::config::Flag);
 * class for abstracting different signal backends (simgrid::xbt::signal).
   with no external dependencies (we need very simple signals).

 MC
 * refactoring and cleanup of the code;
 * ongoing process to cleanly separate the model-checking algorithms
   from the code model-checking support.

 -- Wed Apr 27 21:00:53 CEST 2016 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid (3.12) stable; urgency=low

 The Facelift Release.

 Build System
  * Require g++ v4.7 at least to not speak prehistorical C++.
  * Require Boost 1.48 (for signal2 component).
  * Java must be version 7 at least when activated.
  * Builds on Windows again (including Java bindings).
  * Tracing is now always enabled (no way to turn it out)
  * Remove GTNetS. It was not working anyway.
  * Various cleanups in the cmake scripts.
  * Move headers around to sort them out on installed systems:
    - instr/instr.h  -> simgrid/instr.h
    - instr/jedule/* -> simgrid/jedule
    - simdag/datatypes.h was removed
    - simdag/simdag.h -> simgrid/simdag.h
    - msg/datatypes.h was removed
    - msg/msg.h -> simgrid/msg.h

 cMSG:
 * Interface improvement:
   - Rename MSG_host_is_avail(h) to MSG_host_is_on(h)
   - Sanitize the interface in MSG_task_ module:
     - Merge two functions that were close enough but misleading:
       set_compute_duration(t)      -> set_flops_amount(t)
       get_remaining_computation(t) -> get_flops_amount(t)
     - set_data_size(t) -> set_bytes_amount(t)
       get_data_size(t) -> get_bytes_amount(t)
   - Massive cleanups in the functions related to the energy
     - MSG_host_get_pstate_number() -> MSG_host_get_nb_pstates()
   - New: MSG_host_get_pstate()
 * New example:
   - msg/energy/onoff: switching hosts on and off
 jMSG:
 * Interface improvement:
   - Rename Host.isAvail() to Host.isOn()
   - Rename Process.currentProcess() to Process.getCurrentProcess()
   - Rename Task.setDataSize() to Task.setBytesAmount()
   - Merge Task.getRemainingDuration() and Task.getComputeDuration() into Task.getFlopsAmount()
 * Bug fixes:
   - #18874: Actually allows the GC to reclaim tasks

 SIMIX:
 * New functions
   - SIMIX_process_throw: raises an exception in a remote process
 * Refactoring: Separate sub-modules
   - libsmx: the public interface, as libc in a real system
   - popping: the strange dance that converts a user request into a kernel handling
   - smx_context_*: the virtualization mechanisms that embed the user code
   - smx_*: the handling of each simcalls
 * Interface cleanup:
   - simcall_host_set_power_peak_at -> simcall_host_set_pstate
 * Rename smx_action_t into smx_synchro_t, making explicit that these
   things are used to synchronize processes with their environment.
   For example, a communication is a sort of synchronization involving
   the communicating processes (that may block until the exchange) and
   the platform. The same can be said from computations, etc.
 * Bug fixes:
   - #18888: segfault when a process ends before its kill_time

 SMPI:
 * New functions
   - Onesided early support for: MPI_Win_(create, free, fence, get_name, set_name, get_group), MPI_Get, MPI_Put, MPI_Accumulate, MPI_Alloc_mem, MPI_Free_mem.
   - MPI_Keyval*, MPI_Attr* functions, as well as MPI_Comm_attr*, MPI_Type_attr* variants (C only, no Fortran support yet)
   - MPI_Type_set_name, MPI_Type_get_name
   - MPI_*_c2f and MPI_*_f2c functions
   - MPI_Info_* functions (beware, get_nthkey may not follow the insertion order)
   - MPI_Pack, MPI_Unpack and MPI_Pack_size functions
   - Activate a lot of new tests from the mpich 3 testsuite
 * Features
   - Constant times can be injected inside MPI_Wtime and MPI_Test through options smpi/wtime and smpi/test
   - InfiniBand network model added: Based on the works of Jerome Vienne
     http://mescal.imag.fr/membres/jean-marc.vincent/index.html/PhD/Vienne.pdf
   - When smpi/display_timing is set, also display global simulation time and application times
   - Have smpirun, smpicc and friends display the SimGrid git hash version on --git-version
 * Collective communications
   - SMP-aware algorithms are now dynamically handled. An internal communicator is created for each node, and an external one to handle communications between "leaders" of each node
   - MVAPICH2 (1.9) collective algorithms selector: normal and SMP algorithms are handled, and selection logic is based on the one used on TACC's Stampede cluster (https://www.tacc.utexas.edu/stampede/).
   - Support for Rabenseifner Reduce/Allreduce algorithms (https://fs.hlrs.de/projects/par/mpi//myreduce.html)
 * Replay
   - Replay now uses algorithms from wanted collective selector
   - Replay can be used with SMP-aware algorithms
   - Memory occupation of replay should now be contained (temporary buffers allocated in collective algorithms should be shared between processes)
   - Replay can now replay several traces at the same time (check examples/smpi/replay_multiple example), to simulate interactions between several applications on a given platform. User can specify the start time of each instance. This should also allow replay + actual applications to run.
 * Bug fixes
   - [#17799]: have mpi_group_range_incl and mpi_group_range_excl better test some corner cases
   - Correctly use loopback on fat-tree clusters
   - Asynchronous small messages shouldn't trigger deadlocks anymore
 * Energy/DVFS cleanup and improvement
   - smpi_set_host_power_peak_at() -> smpi_set_host_pstate()
   - new: smpi_get_host_pstate()
 SURF
  * Bug fixes
   - "Full" network optimization flag was broken since Surf++
   - Better handling of precision flags in maxmin
   - Fix bug causing sometimes "Impossible" errors
   - Properly pass cluster properties to included hosts
  * Improvement of the Energy plugin.
    - Always update the consumption before returning that value
    - New property: watt_off to denote the dissipation when the host is off
    - New functions getWattMinAt and getWattMaxAt to retrieve the
      dissipation of pstates that we are not currently at.
  * Java: class NetworkLink renamed to Link
  * New function: simcall_process_get_kill_time()
  * Massive rename s/workstation/host/
    - That's intrusive, but that's good for the project consistency. Sorry.
    - Change config option "workstation/model" into "host/model"
 XBT
  * New functions
   - Add a xbt_heap_update function, to avoid costly xbt_heap_remove+xbt_heap_insert use
   - Add a xbt wrapper for simcall_mutex_trylock (asked in [#17878])
   - Add two new log appenders: rollfile and splitfile. Patch by Fabien Chaix.
   - xbt_dirname and xbt_basename for non-POSIX systems
 MC
  * The model checker now runs as a separate process.
  * The model checker runs must now be launched with the new simgrid-mc program.
  * Record/Replay: the MC can display a textual representation of a path in the
    execution graph. It can then be replayed outside of the model checker.

 -- Mon Oct 12 06:02:41 CEST 2015 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid (3.11) stable; urgency=low

 The Class Release.

 Tools:
 * Normalizing pointers addresses tool for better diff between logs

 Examples:
 * Add cloud examples using new VMs
   - examples/msg/cloud/two_tasks_vm.tesh
   - examples/msg/cloud/simple_vm.tesh
   - examples/java/cloud/cloud.tesh
   - examples/java/cloud/migration/migration.tesh
 * Add java surf examples:
   - examples/java/surfPlugin/surf_plugin.tesh
   - examples/java/reservationSurfPlugin/reservation_surf_plugin.tes
   - examples/java/surfCpuModel/surf_cpu_model.tesh
 * Add SMPI+MSG example:
   - examples/smpi/smpi_msg_masterslave/

 TeshSuite:
 * Add tests:
   - msg process test
   - msg task destroy cancel test
   - msg_host on/off test
 * Move all tests in testsuite to teshsuite (adding tesh files)
 * Restructure teshsuites
   - one folder for each kind of test
 * Restructure AddTests.cmake
   - unify tests names
   - structure the order of tests (with sections)

 MSG:
 * Add virtual machine
   - creation of a VM on a PM
   - migration of a VM from a PM to another PM
 * New functions
   - MSG_process_join(msg_process_t process, double timeout)
   - msg_bar_t MSG_barrier_init(unsigned int count)
   - int MSG_barrier_wait(msg_bar_t barrier)
   - void MSG_barrier_destroy(msg_bar_t barrier)
   - msg_as_t MSG_environment_as_get_by_name(const char * name)
 * New option "msg/debug_multiple_use" to help debugging when a task is used
   several times
 * MSG IO
   - Improvements and finalization of MSG_storage, MSG_file APIs and their
     documentation
   - Increase code coverage in test suites
   - Bug fixes

 SIMIX:
 * Protect context stacks against stack overflow. The number of protected memory
   pages allocated on the top of each stack (1 by default) can be configured
   with the new command line option --cfg=contexts/guard_size:<value>.
 * Simcalls are now generated by a python script that
   - generates files included by SimGrid
   - checks that all the functions exist, and proposes prototypes
 * Clean simcalls
   - remove sem_destroy, file_set_data, comm_destroy, vm_set_state,
     host_set_data, host_get_data
 * New simcalls
   - simcall_process_join(smx_process_t process, double timeout)
 * Fix bug where sleeping processing could not be suspended.

 SURF:
 * Translate surf models from C to C++
   - Generic classes for all models: Model, Resource, Action
   - A generic interface for each kind of model (CPU, Network, Storage
     Workstation, WorkstationVM)
   - C bindings
 * Translate surf routings from C to C++
 * Add callbacks using sigc++ or boost::signals2
   - Add callback functions for resource creation/destruction
   - Add callback functions for action state change
   - Handle Energy as a plugin
 * Replace swag by boost::intrusive
 * Add new routing models for clusters. For documentation, see
   http://simgrid.gforge.inria.fr/simgrid/latest/doc/platform.html#pf_cluster
   - tori, with topology="TORUS" and topo_parameters="ndim1,ndim2,...,ndimn"
     parameters for cluster tag
   - Fat trees, with topology="FAT_TREE" and
     topo_parameters="h;m1,...,mh;w1,...,wh;p1,...,ph" parameters for cluster tag
   - see examples/platforms/torus_cluster.xml and
     examples/platforms/fat_tree_cluster.xml
 * More documentation

 SMPI:
 * Hostfiles support host:nb_processes construct to deploy several processes on
   one node.
 * Collective communication algorithms should not crash if used with
   improper number of nodes and report the error.
 * SMPI now partially supports MPI_Topologies: MPI_Cart_create, MPI_Cart_shift,
   MPI_Cart_rank, MPI_Cart_get, MPI_Cart_coords, MPI_Cartdim_get,
   MPI_Dims_create, MPI_Cart_sub are supported.
 * New interface to use SMPI programmatically (still depends on MSG for
   some parts, see examples/smpi/smpi_msg_masterslave):
   - SMPI_app_instance_register(const char *name, xbt_main_func_t code,
        int num_processes)
   - SMPI_init()
   - SMPI_finalize();
 * Global variables privatization in MPI executables is now performed at runtime
   with the option smpi/privatize_global_variables (default:no).
   Limitations: Linux/BSD only, with mmap enabled. Global variables inside
   dynamic libraries loaded by the application are not privatized (static
   linking with these libraries is advised in this case)

 Tracing:
 * Options defined in XML work correctly now.

 Java:
 * New cmake option, enable_lib_in_jar, to control whether native libraries are
   copied into simgrid.jar or not (ON by default).  Use this option if you want
   to reduce the size of the installed simgrid.jar, *and* the native libraries
   are kept installed elsewhere.
 * Surf binding with SWIG (code generated in maintainer mode only):
   - plugin to handle callbacks
   - CPU model only for the moment

 Build System:
 * Supernovae build mode is definitively removed. It was used to improve
   inlining and inter-module optimizations. It is nowadays superseded by
   link-time optimizations commonly available in compilers.
 * Update ns-3 find lib. Bindings for ns-3 should work again now.
 * Add boost dependency for surf++
 * Add new macro for tests
   - ADD_TESH(name <tesh_args>)
   - ADD_TESH_FACTORIES(name "thread;ucontext;raw" <tesh_args>)

 XBT:
 * New functions
   - xbt_bar_t XBT_barrier_init(unsigned int count)
   - int XBT_barrier_wait(xbt_bar_t barrier)
   - void XBT_barrier_destroy(xbt_bar_t barrier)
 * Make the xbt_os_time module public

 -- Sat May 31 22:39:38 CEST 2014 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid (3.10) stable; urgency=low

 The Clean Diaper Release, a.k.a. SimGrid is leak-free.

 Java:
 * Reintegrate Java to the main archive as desynchronizing these
   package is not acceptable anymore (Java is now considered stable)
 * Add explicit synchronization facilities through semaphores
 * Bug fix: Task.setDataSize() only changed the C world, not the value
   cached in the Java world

 MSG:
 * Dramatically change the way files are handled. API and internals changed, but
   this part of MSG was not considered as production grade either.
 * Add explicit synchronization facilities through semaphores
 * Add a new function MSG_host_get_process_list()
 * Preliminary DVFS support (see examples/msg/energy/ for details)

 SMPI:
 * SMPI is now included directly in the libsimgrid as the windows
   linker doesn't force us on splitting it anymore.
 * Improvements of the SMPI replay tool:
   - Most of the collective communications are now rooted in the same process as
     in the original application.
   - Traces now rely on the same MPI data type as the application (MPI_BYTE was
     used until now). Multiple data types can now be used in a trace.
   - The replay tool now supports traces produce either by TAU or a modified
     version of MPE.
   - Bug Fix: the compute part of the reduce action is now taken into account.
   - Gatherv collective is now supported
   - SimGrid (SMPI for now) can generate replay traces as well. Option -trace-ti
     of smpirun outputs time independent traces for the current run. One file
     is created per process. If too many processes are simulated, this behavior
     can be changed to one file for all processes by using the
     tracing/smpi/format/ti_one_file flag
 * smpirun generates the host file if needed (with given host count and platform)
 * Integration of more than 100 STAR-MPI, MPICH, OpenMPI collective algorithms
   - allows to select one in particular with --cfg=smpi/coll_name:algorithm
   - allows to use the decision logic of OpenMPI(1.7) or MPICH(3.0.4) by setting
     --cfg=smpi/coll_selector:(mpich/ompi)
 * Support for new functions: MPI_Issend, MPI_Ssend, Commutative operations in
   Reduce
 * Add a --cfg:tracing/smpi/internals option, to trace internal communications
   happening inside a collective SMPI call.
 * Fix the behavior of complex data types handling.
 * Make MPI_Wtime another synchronization point to take computations into
   account.
 * Replace MPICH-1 test suite by the one from MPICH 3.0.4. Can be built using
   enable_smpi_MPICH3_testsuite flag in cmake. Run with ctest.
 * Add all missing Fortran bindings, SMPI should work with Fortran 90
   (no privatization of global variables yet)
 * Preliminary DVFS support (see examples/smpi/energy/ for details)

 Model-Checking;
 * Verification of liveness properties is now available for SMPI applications
   (in addition to MSG applications)
 * Bugged examples using SMPI in examples/smpi/mc/
 * Add --cfg=model-check/visited option. Allows the verification of infinite
   programs. Detection of loops in the execution thanks to the system state
   comparison and reduction of the state space to explore. Can be combined with
   DPOR for safety properties.

 SimDag:
 * Allow to change SimGrid configuration (see --help) within the code
   thanks to SD_config() as it can be done in MSG.
 * Add a new function SD_task_set_amount() upon user request.

 PLATFORM:
 * Handle units for values (10ms, 10kiloflops, 10Bps, 1GB, ...)
 * Remove rule based routing (no more PCRE dependency)
 * Add a limiter_link option to cluster tag, to specify a maximum reachable
   bandwidth in fullduplex mode when it is less than twice the nominal bandwidth.
 * Add a loopback_bw and loopback_lat options to cluster tag.
 * Fix the peer tag that could not be mixed with other AS within a Vivaldi
   routing. Now peers are encapsulated in an AS and have their own private
   router but this is transparent.

 XBT:
 * Our own implementation of getline is renamed xbt_getline, and gets
   used even if the OS provide a getline(). This should reduce the
   configuration complexity by using the same code on all platforms.
 * New type: xbt_cfg_elm_boolean.
 * Allow to use yes/no for boolean configuration options in the command line.
 * Allow to disable SimGrid cleanups at exit from command line option.
   There are situations where one may want a simulation to end with an exit.
   Unfortunately, calling exit may cause SimGrid to segfault, which is quite
   annoying when scripting around the simulator. Adding a
   --cfg=clean_atexit:no allows to circumvent this issue.

 Build System:
 * Lots of memory leaks were corrected in this release.
   There is no known memory leaks anymore, in all of our 600+ tests.
 * New command line option --version, to get SimGrid version information.
   Packagers may want to add extra words to SIMGRID_VERSION_EXTRA defined in
   CMakeLists.txt.
 * Supernovae builds are deprecated, and expected to be removed in the next
   version of SimGrid.

 -- Sun Nov 17 00:26:44 CET 2013 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid (3.9) stable; urgency=low

 The Grasgory release: GRAS is really dead now.

 * Complete overhaul of the internal host structures scheme.

 GRAS:
 * If you use GRAS, you should stay at SimGrid 3.5 (at most) since it
   was considered as experimental and badly maintained since then.
 * Keeping it was thus a trap to our potential users, that could take
   it instead of MSG or SMPI by mistake despite is pity state.
 * GRAS seems to have very few users (if any), and no one volunteered
   to maintain it further. It also induces a lot of XBT code (for
   portability sake), that must be maintained too.
 * For all these reasons, we killed GRAS. If someone wants to revive it
   in the future, don't cry, our git history still remembers of GRAS.

 Documentation:
 * Major overhaul. Merge our documentation again as time proved that
   splitting it was really not helping our users.
 * Further improve the developer documentation to help newcomers
   hacking on SimGrid itself. The user documentation (and in
   particular, the beginner documentation) is still in a sorry state.

 SMPI:
 * Now works on Windows too!
 * Much more extensive test suite, from MPICH

 SIMDAG:
 * Add a new loader (SD_PTG_dotload) that creates a parallel task graph
  (i.e., a DAG whose nodes are parallel tasks) from a dot file. Creates a
  dynar of SD_TASK_COMP_PAR_AMDAHL and SD_TASK_COMM_MXN_1D_BLOCK tasks.
 * Bug fix: let task be scheduled when the last dependency to be solved is
   a control dependency.
 * Remove SD_load_environment_script function.
   Use the C sg_platf function if you want to declare a platform
   programmatically.

 MSG:
 * New function: MSG_process_get_number()
 * Old function documented: MSG_config()
 * Remove MSG_load_platform_script function
   Use the C sg_platf function if you want to declare a platform
   programmatically.

 SURF:
 * Change the default value of the TCP_gamma constant (maximal size of TCP
   congestion window) to a more realistic 4MiB value. If you notice changes in
   your simulation results, you can fall back to the previous 20k tiny window
   by adding --cfg=network/TCP_gamma:20000 on command line.
 * (Hopefully) fix a bug wrt periodic availability and state traces
 * Bug fix: use default values at start when first event in availability/state
   trace is not at time 0.

 PLATFORM:
 * remove the "new_" part of function name sg_platf_new_trace_connect
   (resulting in sg_platf_trace_connect), since it does not create
   anything new

 XBT:
 * Kill synchronized dynars, and xbt_dynar_dopar(). We cannot think of a
   use case where it's really mandatory, and maintaining it was a pain in
   our code base.
 * New: xbt_fifo_search(), search an item with a user-provided
   comparison function instead of dumb pointer comparison.

 LUA:
 * Fix the lua deployment:
   Use `simgrid.init_application()` before deployment instead of
   `simgrid.msg_register_application()` after.

 TRACING:
 * Transfer the tracing files into the corresponding modules.

 -- Tue Feb  5 11:31:43 CET 2013 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid (3.8.1) stable; urgency=low

 The "we are told that some people want to also *install* the simgrid
 framework" release.

 * Add missing file "tesh.1" to the archive.

 -- Sat Oct 27 16:12:11 CEST 2012 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid (3.8) stable; urgency=low

 The Psssshiiiit release: SimGrid jumps into the Cloud.

 MSG:
 * Add an experimental interface to manipulate VMs. They are mainly
   process groups with very few intrinsic semantic, but they should
   allow you to build the semantic you want easily.
 * New function: MSG_host_set_property_value()
 * New function: MSG_process_on_exit(). To clean memory in all cases.
 * Bug fixes that made the host (and link) failures unusable.
 * Add a way to auto-restart process when the host in which they are
   executing comes back (ON_FAILURE="RESTART" on deployment file,
   MSG_process_auto_restart_set).
 * Use the "msg_" prefix for all datatypes (instead of m_, msg_ and MSG_),
   please stop using the old ones, they are DEPRECATED.

 * Deprecate functions MSG_global_init() / MSG_global_init_args()
   Please use MSG_init() instead. (reducing the amount of entry
   points in the library helps us).
 * Make it impossible to link against the wrong version of the lib
 * Deprecate MSG_clean(). No need to call it anymore.
 * Function MSG_get_host_number() is not deprecated anymore.

 Documentation:
 * Split the doc into a user guide and a reference guide.
 * Start a developper guide to help people hacking on SimGrid.

 Cmake:
 * Enable tracing by default. This modules rocks you should use it.
 * Remove option custom_flags. Now use environment variables CFLAGS
   and LDFLAGS.
 * Use default cmake things to detect lua instead of home grown ones.
 * New option "enable_mallocators" to disable mallocators, for debugging
   purpose ("on" by default).

 SIMIX:
 * Bug fixes around the resource failures: don't let the processes
   survive the host they are running onto.
 * Add an interface to auto-restart processes when the host in which they are
   executing comes back.
 * Ensures that SIMIX_clean is called automatically. It's not part of
   the public interface anymore (bindings should be updated).

 SimDag:
 * Bug fix for when SD_Simulate is called with a positive value: be careful
   when comparing doubles. Sometimes they are different for non significant
   digits only.
 * New types of typed tasks. SD_TASK_COMP_PAR_AMDAHL represents a
   parallel task whose initial work is distributed among host according
   to the Amdahl's law. Such tasks are created with a parameter alpha
   that corresponds to the non-parallelizable part of the computation.
   SD_TASK_COMM_PAR_MXN_1D_BLOCK represents a complex data redistribution
   between two sets of workstations assuming a 1D block distribution (each
   workstation owns a similar share of data) on both sides.

   These tasks can be scheduled with SD_task_schedulel or SD_task_schedulev.
   Data redistribution will be automatically scheduled once parent and child
   are both scheduled. The filling of computation_amount and
   communication_amount structures is now done seamlessly thanks to the chosen
   assumptions.
 * New function SD_workstation_dump to display various information
 * New function SD_task_set_rate to throttle the bandwidth allowed to be used
   by a SD_TASK_COMM_E2E typed task. This rate depends on both the nominal
   bandwidth on the route onto which the task is  scheduled and the amount of
   data to transfer.
   To divide the nominal bandwidth by 2, the rate then has to be:
                     rate = bandwidth/(2*amount)
 * Compute tasks that have failed can now be rescheduled and executed again
   (from their beginning)
 * Increasing source code coverage (src/simdag is now covered at 95.8%
   on average)

 SMPI:
 * Re-implement time-independent trace replay using SMPI (at the
   smpi_smp_* level) instead of MSG. This should replace
   examples/msg/actions/actions.c
 * Implement support of MPI Datatypes (vectors, hvectors, indexed,
   hindexed and structs)
 * Implement the exchange of non-contiguous data.
   [Khalid Hasanov & Jean-Noel Quintin] Thanks for the patch, guys.
 * Correct behavior of smpi/sender_gap and set its default value to 0
 * Add option to asynchronously send small messages to allow better
   simulation of pt2pt communications. --cfg=smpi/async_small_threshold:value
   specifies the size in bytes under which messages will be asynchronously sent.
 * Add support of MPI_Iprobe, MPI_Probe, MPI_Testall, MPI_Wtick functions
 * SMPI now handles more MPI specific values in input. Closes [#14389] and [#14388]

 SimGrid:
 * New C interface to define a platform: XML is now optional.
   For more info, please check include/simgrid/platf.h.
 * New interface to define random platforms from the C:
   For more info, please check include/simgrid/platf_generator.h and
   examples/msg/masterslave/masterslave_platfgen.c
 * Export a sg_cmdline dynar containing all the arguments we got from
   the command line.

 TRACE:
 * Two new tracing options for adding comments to trace file so you
   can track your experiments (see --help-tracing for details).
 * New option to generate an impoverished trace file (--cfg=tracing/basic:1)
 * Adding the SimGrid version that generated the trace file as a comment.
 * Instrumenting other MSG functions (MSG_task_isend_with_matching and MSG_task_dsend)
 * Fix to avoid key clashes on Paje links
 * Other minor fixes related to the Paje specification

 XBT:
 * Functions xbt_dict_hash() and xbt_dict_hash_ext() are made public,
   and renamed to xbt_str_hash() and xbt_str_hash_ext().
 * New function: xbt_os_timer_resume() to restart a timer w/o resetting it.
 * Greatly improve the robustness of mmalloc to user errors (such as
   using an area after freeing it, or freeing it twice)

 -- Thu Oct 25 17:30:06 CEST 2012 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid-java (3.8.1) stable; urgency=low

 * New module: org.simgrid.trace.Trace (SimGrid trace bindings)
   Warning: all methods are visible, but only some of them are
   implemented so far. Check the source (src/jtrace.c)
   for further information.
 * New module: org.simgrid.msg.File (SimGrid File management functions)
 * New Module: org.simgrid.msg.VM (SimGrid interface to mimick IAAS clouds)
 * Change the meaning of Process.restart: now restart the process from
   the beginning, like MSG_process_restart in C.
 * Add Process.setAutoRestart: handling of process restart when failed
   host comes back.
 * Add Process.getProperty, Host.getProperty, Host.getProperty: allows
   you to retrieve the properties of the processes/hosts
 * Deprecate Msg.clean(): you can just forget about it now.
 * New function Process.getCount(), that only works when compiling
   with the not yet released version 3.9 of the C library.

 * New context factory based on Coroutines. It mandates a modified JVM
   but then, the simulations run about five times faster, and there is
   no limit to the amount of processes (beside of the available memory).

 -- 2012-12-04 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid (3.7.1) stable; urgency=low

 MSG:
 * Restore the prototype of MSG_process_create_with_environment() to
   the pre-3.7 situation by removing the kill_time argument.
 * Add a MSG_process_set_kill_time() function instead.

 SURF:
 * Fix weird behaviors when dealing with parallel tasks.

 WINDOWS:
 * Simgrid is now built as a dll.
 * Simgrid-java now works on Windows.
 * Simgrid-Java is now included into Windows package.

 MacOS:
 * First pre-build package for MacOSX.

 Build System:
 * Fix compilation when using MSG_USE_DEPRECATED.
 * Fix some compilation issues on Macs and Windows.
 * Reduce the number of failing tests on exotic systems, like Debian/Hurd.
 * Environment variables CFLAGS and LDFLAGS are now honored by cmake.

 We discovered that the Lua console is broken, but we are missing the
 manpower to fix it right now. The problem existed in 3.7 too, so we
 are not blocking the release for that. Sorry if you depended on this
 feature, any help would be really welcome.

 -- Thu Jun 7 2012 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>


SimGrid-java (3.7.1) stable; urgency=low

 The "Java aint got to be bloated and slow" release

 Major cleanups:
 * Various internal cleanups and performance improvement
   Simulations are expected to run up to twice faster or so
 * Make Process.kill(process) an instance method, not a static one
 * User processes are not java.lang.Thread subclasses.
   This breaks the compatibility (sorry), but previous API was
   brain-dead, making it impossible to have non-trivial
   initializations in the process constructor.
 * Require a full constructor per Process sub-class.
   Kinda breaks the compatibility (sorry), but this allows a much more
   efficient way to launch the processes at simulation startup.
 * Do not embeed our version of semaphores, java 1.5 can be considered
   as sufficiently prevalent for us to not dupplicate its features.
 * Lot of bug fixes

 Extend the API:
 * Add examples for almost every part of the API
   We spotted and fixed a lot of bugs in the process

 * New module: asynchronous communication API
 * New function: Process.sleep()
   It takes milliseconds as argument, just as java.lang.Thread.sleep()
 * New module: org.simgrid.msg.Mutex (SimGrid mutexes)
 * New module: org.simgrid.msg.RngStream (RngStreams random generators)

 -- 2012-06-12 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid (3.7) stable; urgency=low

  The "spring cleanups (before the next Big Project kicks in)" release.

  Models:
  * We can specify the SMPI latency/bandwidth factor with command line
    add --cfg=smpi/bw_factor:"threshold0:value0;...;thresholdN:valueN"
    or add --cfg=smpi/lat_factor:"threshold0:value0;...;thresholdN:valueN"
    You can also use the "config tag" from platform file by adding this line
    <prop id="smpi/bw_factor" value="threshold0:value0;...;thresholdN:valueN"></prop>
    (see "example/platforms/tag_config.xml" to use "config tag").
    Note that the command line supersedes the platform file configuration.
  * Change the correction factors used in LMM model, according to
    the latest experiments described in INRIA RR-7821.
    Accuracy should be improved this way.
  * Use the partial invalidation optimization by default for the
    network too. Should produce the exact same results, only faster.
  * Major cleanup in surf to merge models and split some optimization
    mechanisms from the core of the models. As a result you can now
    specify which model to use (e.g., --cfg=network/model:LV08
    --cfg=cpu/model:Cas01) and which optimization mode to use
    (e.g., --cfg=network/optim:lazy --cfg=cpu/optim:TI).
    Incompatible combinations should err at initialization. See
    --help-models for the list of all models and optimization modes.
  * The CLM03 workstation model was dropped for simplicity because it
    used the deprecated CM02 network model. Use default instead.
  * Rename the TCP_gamma configuration option to network/TCP_gamma
  * Rename the coordinates configuration option to
    network/coordinates, and document it
  * Use now crosstraffic keyword instead of the terribly misleading
    fullduplex keyword. It is activated by default now in the current
    default model, use --cfg=network/crosstraffic:0 to turn it off.
  * Ongoing refactoring the model parsing to make XML files optional
    See include/simgrid/platf.h for details (still to be completed)

  MSG:
  * Major overhaul of the documentation. Almost instructive now :/
  * Deprecate the use of m_channel_t mechanism like MSG_task_{get,put}
    functions and friends. This interface was considered as
    deprecated since over 2 years, it's time to inform our users that it is.
    Switch to MSG_task_{send,recv} instead, or compile SimGrid command line
    'cmake -Dcustom_flags="-DMSG_USE_DEPRECATED" .' if you really need to
     use these (crappy) functions in your code.
    These functions will be removed soon. Stop using them now.
  * Deprecate MSG_get_host_{table,number}
    Implement MSG_hosts_as_dynar() instead.
  * Implement MSG_processes_as_dynar() (Closes gforge #13642)
  * Remove the public field msg_host_t->name. Use MSG_host_get_name()

  Simix:
  * Stabilize the parallel execution mode of user contexts
  * Introduce configuration variables to control parallel execution:
    - contexts/synchro: Synchronization mode to use when running
      contexts in parallel (either futex, posix or busy_wait)
    - contexts/parallel_threshold: Minimal number of user contexts
      that must be part of a scheduling round to switch to parallel
      execution mode (raw contexts only)
  * Fix bugs that prevented to use suspend/resume along with
    synchronization structures.
  * Fix bugs in process termination that lead to invalid memory access
    in very specific conditions.

  SURF:
  * Introduce a parallel mode for the models (controlled by surf/nthreads
     configuration item). In our tests, running the models in parallel
     never lead to any speedups because they are so fast that the gain
     of computing each model in parallel does not amortizes the
     synchronization costs, even when ultra fast futexes are used.
    This is released anyway because YMMV.

  SimDag:
  * Performance boost by using a swag internally to compute the set of
    tasks that are finished and should constitute the return value of
    SD_simulate.

  SMPI:
  * Enable it by default now that it is considered rather stable.

  TRACE:
  * Documentation of the tracing functions.
  * Performance gains when tracing categorized/uncategorized resource
    utilization by avoiding calls to get route when updating resource
    variables. LMM constraints are being used instead.
  * API changed to set task categories. Use MSG_task_set_category instead
    of TRACE_msg_set_task_category, and SD_task_set_category instead
    of TRACE_sd_set_task_category. They only work if ENABLE_TRACING is ON.
  * Bugfix for graphicator, routes not correctly obtained, memory leaks
  * Examples for link user variables added (see at examples/msg/tracing/)
  * Deprecated function TRACE_msg_set_process_category completely removed
  * Trace header updated according to the latest Paje file format
  * Tracing network lazy updates, no longer obligate users to use full updates
  * --cfg=tracing/platform:1 also registers power/bandwidth variables
  * Experimental: let user code declare/set/push/pop application states for hosts
  * API changed to allow the manual creation of graph configuration files
    for Triva. See TRACE_get_node_types() and TRACE_get_edge_types().

  Lua:
  * Improve the API of Lua MSG bindings, using the Lua spirit.
  * Each simulated process now lives in its own Lua world (globals are
    automatically duplicated). It helps writing simulators. Will allow
    to run Splay programs within SimGrid in the future.
  * Add a Chord example in Lua, equivalent to the MSG one.

  MODEL-CHECKING:
  * Start the implementation of a solution to express temporal
    properties, not only local assertions. This is still an
    experimental work in progress, stay clear from it to be safe.

  XBT:
  * Logs:
    - Add new runtime parameters --help-logs and --help-log-categories
      to display information about supported logging parameters and
      categories.
    - Old deprecated parameters --{gras,surf,msg,simix,xbt}-log=...
      don't exists anymore.
  * Mallocators: allow value NULL for the reset function.
  * Dicts:
    - New function xbt_dict_new_homogeneous(void(*)(void*)) to
      create homogeneous dictionaries, where all the elements share the
      same free function. Non homogeneous dictionaries will be
      deprecated in the next release.
    - Dicts of scalar elements (xbt_dicti_*) are deprecated.
    - Multi-level dictionaries are deprecated.
  * Dynars:
    - new function xbt_dynar_search_or_negative() that is useful when
      you have less than 2 million elements in your dynar and don't
      want of the extra complexity of catching exceptions when the
      element is not found.
  * Portability layer
    - Make xbt_os_thread module (for thread portability) public.
      Documentation is still to come, sorry.
  * mmalloc module:
    - Cleanups and simplifications to make it maintainable again.
    - Exotic features (such as memalign and valloc) were removed.
    - The metadata were extended and improved so that the
      model-checker becomes able to explore and inspect the heaps.
    - This may induce a performance drop when enable_model-checking is
      ON in cmake (even if it's not used in the simulation), but it is
      necessary at this point to get MC working.

      Turn model-checking OFF if simulation performance matters to you.
      Not enabling it at runtime is not enough, disable it in cmake.

 -- Tue May 15 11:30:19 UTC 2012 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>


SimGrid (3.6.2) stable; urgency=low

 The "Not coding new stuff allows to polish old things" release.

 General
 * New bindings to the NS3 packet level simulator (experimental)
 * Use the raw (efficient) execution contexts instead of the sysv
   (portable) ones when possible.
 * libpcre is now mandatory in any cases since not using it led to
    severe performance loss and possibly other issues
 * Update the XML platforms:
   - G5K: include the latest machine in Nancy
   - GridPP and LCG: new platforms
 * Documentation was partially updated, at least (more to come)

 Bug fixes, cosmetics and small improvements
 * Free terminated processes before the end of the simulation to avoid
   exhausting the memory of users having very dynamic amount of
   processes.
 * Bug fix and cosmetics about canceling non-running tasks
 * Bug fix about the dot loader's issues when using libcgraph

 Portability
 * Create an installer for windows with nsis (amd64 and win32)
   - Add an hello world project to illustrate SimGrid project creation.
   - Embed libpcre into the SimGrid installer to avoid
     its compilation burden
 * The raw execution contexts should work on Apple now
 * Port to Windows 64 bits
    - Sysv contexts now have an implementation for this arch
    - GRAS communication features now support this arch
 * Drop support for borland compiler on windows
    - this code was not maintained, and we kinda depend on gcc nowadays
 * Fix portability issues on kfreebsd/gnu: build error about semaphores
 * Fix portability issue on unstable ubuntu: linker became picky on
   argument order

 -- Wed Oct  5 15:51:01 CEST 2011 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid (3.6.1) stable; urgency=low

 The "Oops, we broke Macs too" release

 Portability
 * Fixed contexts detection so that raw ones are used when possible
 * On Mac, do not use Posix Ucontexts with gcc v4.[1-5] since this
   leads to a strange error, with user code segfaulting sometimes when
   the generated code is not perfectly aligned (which is not
   controllable from the user side, depends on the amount of code)

 XBT
 * New macro: CATCH_ANONYMOUS, which is like CATCH(e) but without argument.

 -- Mon Jun 27 13:59:03 CEST 2011 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid-java (3.6) unstable; urgency=low

 * Initial release.
 * Split of every thing from SimGrid v3.5 into a separate package.

 -- 2011-10-05 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid (3.6) stable; urgency=medium

 The Summer Release, also known as the "OMG! They Killed Kenny!" version

 Java and Ruby:
 * Bindings now constitute their own package, separated from the main one.
   Rationale: reduce our maintenance nightmare by reducing the module coupling
   They will soon be released on their own on gforge.
 * In the meanwhile:
   svn co svn://scm.gforge.inria.fr/svn/simgrid/contrib/trunk/simgrid-java
   svn co svn://scm.gforge.inria.fr/svn/simgrid/contrib/trunk/simgrid-ruby

 GRAS: It is not considered as stable anymore, but experimental. Sorry.
 * It's not quite deprecated for now because we have no replacement,
   but it may soon become the case.

 SMPI
 * New MPI functions supported: MPI_Comm_disconnect, MPI_Comm_get_name
 * Fortran: New user-level cache variable to store the rank of the running
   process. This improves performance by an order of magnitude.
 * C: New coccinelle script to automatically locate and modify global and
   local static variables.
 * Improved SMPI network model with a sender-side gap to account for multiple
   parallel sends.

 MSG
 * New function MSG_comm_get_status(). MSG_comm_test() and MSG_comm_testany()
   only say if a communication is finished, no matter whether it succeeded or
   failed. You can call MSG_comm_get_status() to know the status of a finished
   communication.
 * New function MSG_task_dsend() to send a task and detach it. When a
   communication is detached, you are never notified of its success or failure
   and the memory is released automatically once it is finished. This function
   is useful when you don't care about the end nor the success of a
   communication.
 * Change the prototypes of action replay. Sorry for inconvenience,
   but this is really more efficient this way (and to adapt your code,
   you just have to fix the initialization, that shouldn't be too long)
 * Kill the braindead MSG_task_refcount_dec() function. I guess nobody
   ever managed to do anything useful with it.
 * New function MSG_comm_testany(). Similarly to MSG_comm_waitany(), it
   takes a dynar of communications. It returns immediately and gives the
   index of a finished communication (if any).
 * New example: a basic implementation of the Chord P2P algorithm.

 SURF
 * New model for multi-core CPUs. You can now use the core attribute to
   precise the number of cores of a host. This is a basic model. Every
   process running on the host receives at most the power provided in
   the DTD (throughput<=power). Total throughput of process cannot exceed
   power * num_cores.
 * New peer tag. This peer tag creates a tiny AS comprising a host and a
   router linked by an up-link and a down-link (possibly asymmetrical).
   This kind of pattern allows to easily build last-mile model style platforms.
   Aggregating such patterns in a rule-based AS is thus the technique of
   choice for modeling large peer-to-peer/volunteer computing/cloud platforms.
 * New model for Vivaldi routing. We transformed the Vivaldi network model
   into a Vivaldi routing model (based on the rule-based model). This allows to
   combine Vivaldi based latencies with last-mile platforms.

 SIMIX
 * Added a check for NaN of IEEE754 infinite in the double entries of
   the smx_user.c file
 * Introduce a new context factory "raw", highly inspirated from the
   ucontext factory, but using manually crafted functions in assembly to
   do the work in an efficient manner.
 * Allow to change the used context factory at run time, not only at
   compilation time. Use --cfg=contexts/factory:raw for maximal speed.
 * Add an option --cfg=contexts/stacksize:N to set the stack size of the user
   contexts at runtime (only with raw contexts or ucontexts).
 * Completely rewrote this module to allow parallel execution of user
   processes. Use --cfg=contexts/nthreads:N to execute user processes
   with N parallel threads (the default is 1, meaning no parallelism).
 * Allow to decide dynamically between sequential and parallel modes.
   When nthreads > 1, you can use --cfg=contexts/threshold:P to run the user
   processes in parallel only when their number is greater than or equal to P
   (the default is 2).
 * Added a check for NaN of IEEE754 infinite in the double entries of
   the smx_user.c file

 XBT
 * New command line option: if you pass --cfg=verbose-exit:0, SimGrid
   won't output the state of processes when interrupted with Ctrl-C
 * Add a new function xbt_dynar_to_array that transforms a dynar into a
   NULL-terminated array. This may solve backward compatibility issues
   due to the change to return type of SD_simulate. See also:
   http://lists.gforge.inria.fr/pipermail/simgrid-user/2010-December/002206.html
 * Add new macros with variable number of arguments.
   - in xbt/log.h: XBT_DEBUG, XBT_VERB, XBT_INFO, etc.
   - in xbt/asserts.h: xbt_assert
   - in xbt/cunit.h: xbt_test_{add,fail,assert,log}
   - in xbt/ex.h: THROWF and RETHROWF.
   Define XBT_USE_DEPRECATED if you want to use the old numbered macros like
   INFO1, INFO2, etc.
 * Change xbt_die() to accept a format string with arguments, just like printf.
 * New data structure: xbt_lib_t, like a dict but more general and with better
   memory handling.

 INSTR
 * New configuration options
   Options triva/categorized and triva/uncategorized can be used to generate
   graph configuration files for Triva visualization tool.
 * Configuration option tracing/platform is renamed to tracing/categorized
 * XBT logging makes tracing error checks easier, new root log hierarchy: instr
 * New TRACE_user_link_variable interface:
   User provides the name of the link and the tracing variable to attach to it
 * the declaration of tracing categories must be done after the environment
   creation
 * simpler tracing interface, just one way to declare categories
    TRACE_category or TRACE_category_with_color, it is up to you
 * links in the trace file are again identified by their names
 * trace contains the full platform hierarchy exactly as declared using the ASes
 * Options tracing/msg/[task|process]:1 groups the process by hosts
   for both cases, tasks and processes must have names that are unique during the simulation
   these options generate traces that are suited to gantt-charts, such as the space-time view of Paje
 * The experimental option tracing/msg/volume is deprecated
   its functionality may be reincorporated if needed
 * Buffering
   The tracing generates a trace file with unordered timestamped events,
   because of the way the core simulator (surf) works. A script available
   at the tools directory (fix-paje-trace.sh) can be used to put the events
   in order. We have changed the tracing so it can generate ordered timestamped
   events in the final trace, but depending on the simulator (and how much time
   is simulated) that can lead to a huge memory utilization. It is deactivated
   by default, but it can be activated using the --cfg=tracing/buffer:1 switch.

 Build Infrastructure
 * Define a SIMGRID_VERSION macro in simgrid_config.h.
   - We are trying hard to keep the API stable, but it may happen that
     some things change (we're a research project after all, not a
     nuclear plant operating system). If such things should happen, you
     could rely on that macro to adapt.
   - current value: 30600 for 3.06.00, aka 3.6
 * Define macro MAKE_SIMGRID_VERSION(major, minor, patch) to help building
   a number that can be compared with SIMGRID_VERSION.
 * Add a build option -Denable_debug (set to ON by default): when set to OFF,
   assertions and verbose/debug logging events are disabled at compile time.

 -- Tue Jun 21 08:57:43 CEST 2011 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid (3.5) stable; urgency=medium

 Model Checking
 * New feature to any SimGrid-based simulator: Model-Checking
   Check SIN#1 for more details.

 SMPI
 * New Model SMPI (three-interval linear regression for correction factors)
   See RR-7426, available at http://hal.inria.fr/inria-00527150
 * Ability to use FORTRAN MPI code (through f2c, automatically privatized)
 * New MPI functions supported: MPI_Get_count(), MPI_Comm_split()
 * New: RAM folding (see RR-7426 and examples/smpi/NAS/DT-folding)
 * New: execution sampling (see RR-7426 and examples/smpi/NAS/EP-sampling)
 * See also src/smpi/README

 Tracing:
 Tracing:
 * Tracing system
   - Tracing API changes: TRACE_start and TRACE_end should not be called
     by user-code. They are automatically called by simulators created
     with SimDAG, MSG and SMPI if the toolkit is compiled with
     tracing_enabled=ON. Categories declaration and utilization remain the
     same for MSG and SimDag.
   - A function was added to the tracing API to declare categories with
     colors:
        - TRACE_category_with_color (char *category, char *color)
                where color must be in the following format
                    "%f %f %f", red, green, blue
                and red, green, blue are float values in the interval [0, 1]
        - User can specify NULL as color parameter, or continue calling
            TRACE_category (cat)
          On that case, the tracing system will define random colors
   - The following command-line options are supported:
        --cfg=tracing/filename:msg.trace
        --cfg=tracing:1               (activate tracing, needed to use others)
        --cfg=tracing/platform:1      (categorized resource use)
        --cfg=tracing/uncategorized:1 (uncategorized resource use)
        --cfg=tracing/msg/task:1      (task creation)
        --cfg=tracing/msg/process:1   (process creation, migration)
        --cfg=tracing/msg/volume:1    (volume of MSG send/recv)
        --cfg=tracing/smpi:1          (SMPI interface tracing)
        --cfg=tracing/simdag:1        (allow SimDAG tasks receive categories)
   - examples of examples/msg/tracing updated
 * Tracing SimDag
   - DAXLoader and DOTLoader functions can generate tasks with categories
   - A new function to attribute a category to SD tasks:
        TRACE_sd_set_task_category (SD_task_t task, char *category)
 * Tracing the MPI interface implemented by SMPI
   - Collective operations are traced with states
   - Point-to-Point operations are traced with states/links
   - Tracing activated by a parameter "-trace filename" passed
     to smpirun during execution (considering that simgrid
     is compiled with tracing enabled)
   - To run the simulation with gdb, the simulator
     accepts --cfg=tracing/smpi:1 to trace SMPI
   - tesh files to check if smpi tracing is ok
   - See examples/smpi/NAS/DT-trace
 * GTNetS tracing re-worked
   - adaptation to the tracing system of GTNets to cope
     with modifications regarding the fullduplex mode
   - new tesh files to check if gtnets tracing is ok

 MSG
 * Asynchronous communications through the functions:
   MSG_task_isend/irecv and MSG_comm_test/wait/waitall
 * New function: MSG_load_platform_script()
   to make possible using a lua script instead of XML files to set up platforms
 * New function: MSG_set_function
   to associate functions to processes, used when bypassing the parser
 * New functions: MSG_task_set_name(), MSG_task_set_compute_duration()

 Platforms: Add some more examples in examples/platforms
 * Grid'5000: see www.grid5000.fr
 * *_30000_hosts.xml: various huge files [mainly scalability testing]

 SURF
 * Change the XML format. This is a very important modification. SimGrid
   3.5 introduces a new hierarchical format based on the notion of
   Autonomous Systems. Compatibility with old format is ensured
   through the perl script provided in the install bin directory
   bin/simgrid_update_xml.
   It is now possible to build platforms with specific routing
   mechanism (Full/Dijkstra/DijkstraCache/Floyd) and to easily
   connect several platforms together. We will try to provide soon
   set of realistic platforms exploiting these properties (have a
   look at examples/platforms/ for the moment).
 * Take the opportunity of the XML format change to be a good XML citizen:
   rename link:ctn to link_ctn and similar changes (also dealt with by
   simgrid_update_xml)
 * Add a new routing scheme (rule-based) using regular expressions. It
   enables to have an extremely low memory footprint when the
   underlying routing is simple and can be compactly described. You
   need to have libpcre4-dev (perl regular expressions) installed if
   you want to use this routing scheme.
 * Revive the cluster TAG and allow to easily and efficiently (both in
   term of memory and speed) connect clusters together. Have a look
   at teshsuite/simdag/platforms/ to see how this can be done. With
   this tag, you can create clusters with thousands of tasks at no
   cost (have a look at examples/platforms/).
   Note: clusters are implemented as ASes, so there is no need for an
   enclosing AS tag if you have only one cluster in your platform.
 * Add new generic functions in the public interface that allows the user
   to call SURF 'create_resource' methods from your code (same
   functionality as the XML bypass mechanism but with a much lighter
   burden).
 * Add a new model (enabled through command line --cfg=network/model:SMPI)
   that uses a piecewise linear approximation to produce better
   results when exchanging small messages.
 * Add a new parameter to handle correctly full duplex link and account
   for interferences between uplink and downlink communications
   (activate with --cfg=fullduplex:1).

 SIMDAG
 * Rename the SD_READY (all dependencies are satisfied and task is
   scheduled) state in SD_RUNNABLE and define a new SD_SCHEDULABLE (all
   dependencies are satisfied) state.
   This prevents a confusion between the notion of "ready to schedule"
   (SD_SCHEDULABLE) used in DAG scheduling and that of "ready to be
   simulated" (SD_RUNNABLE) used by the simulation kernel.
 * Change the way a task is considered as ready. Instead of removing
   dependencies when a task is done, a counter is decreased. This way,
   it is always possible to reach ancestors thanks to the
   SD_taks_get_parents function (even after the end of the simulation.)
 * Change the return type of SD_Simulate from (SD_task_t*) into
   xbt_dynar_t. This function was in handling a dynar internally and
   converted it into a NULL terminated array for historical reasons.
 * New function SD_dotload(char*) to load a DAG described in dot
   format. This loader and the corresponding examples require the
   installation of the graphviz library.
 * Fix a bug in the management of tasks of size 0 in the surf network
   models. This problem was only visible with SIMDAG and you should
   thus disregard results produced with earlier versions if you
   relied on this feature (some tasks were blocked because of this).
 * Fix a bunch of stuff that prevented to use classical models with SIMDAG
   even though your applications were doing only point-to-point
   communications and sequential computations. Now you can really use any
   model you want (of course, if you create real parallel tasks, which are
   not implemented in most models beside ptaskL07, this will abort).
 * Add an example that schedules a DAX on an heterogeneous platform
   using a Min-Min strategy.
 * New function SD_workstation_get_current_task() that returns the kind
   of task currently running on a workstation in the sequential access
   mode.
 * Raise some warnings when unexecuted tasks remains at the end of the
   simulation. This is usually caused by cycles in the DAG.

 SIMIX
 * New function: SIMIX_process_set_function() called by MSG_set_function
 * Change the underlying waiting queue in semaphores so that a process
   can wait on several of them simultaneously (as in waitany).
 * Fix the way to handle tokens in semaphores so that all access patterns
   work: {acquire, acquire_timeout, waitany} / {release, release_forever}.
 * kill the dirty pimple SIMIX_message_sizes_output()
   Please use (proper) visualization instead

 XBT
 * New data container: setset (set of sets of elements)
 * New module: mmalloc (mapped malloc, allowing to have several
   independent segments of malloc)
 * New function: xbt_dict_cursor_set_data()
 * New functions: xbt_dynar_sort(), xbt_dynar_compare()
 * New function: xbt_dynar_is_empty()
 * New function: xbt_fifo_get_last_item()
 * Fix xbt_dynar_shrink(): use the right element size.
 * Fix xbt_dynar_set*(): allow index larger than current size and memset 0
   uninitialized areas during expand.
 * Fix semaphores: previous implementation was severely broken.
 * Use library init/fini functions for our initialization.
   - you can use logs and other feature as soon as you want in your
     code (even before the xbt_init / MSG_init)
   - xbt_exit is now a no-op and produce a warning when used.

 GRAS:
 * Port GRAS to new SIMIX mechanisms. This allows gras users to
   benefit from the latest improvement to the simulation kernel.
 * Kill measurement sockets for now. If you rely on them, sorry. This
   release is not for you. This feature will be reintroduced in the
   future, but we cannot delay the release any further.
 * New function: gras_msgtype_get_name().
 * Implement gras_agent_spawn in RL too (the prototype changed a bit)
 * Fix (at last) the pmm example: it should not randomly fail anymore.

 Build chain: bug fixes and overall polishing
 * Cmake is now stable enough. Hence, we killed the autotools.
 * Port to windows ( TM :)
 * Fix the 'make install' target.
   No need to use 'make install-simgrid' anymore
 * Introduce a 'make dist' target compiling a *source* archive
   'make package' compiles a binary archive
 * Compile java files only on need
 * Add --cd and --setenv command line options to tesh
 * Out of source builds are not fully supported yet, but we are close
 * Enable supernovae and optimization flags by default for our users

 LUA Bindings
 * Add layer to set up environment directly from lua, without XML.
 * The effect of gras_stub_generator can be achieved through
   lua too (check examples/gras/console/ping_generator.lua)

 -- Wed, 01 Dec 2010 22:09:23 +0100 Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>

SimGrid (3.4.1) stable; urgency=low

 The "Polishing easter eggs is probably a good idea" release.
 This is a bug fixes release only.


 Java Bindings
 * Fix a bug preventing the tasks from begin garbage collected.

 MSG
 * Fix a bug occurring when a host involved in a communication fails.
   This was not detected properly by the other peer involved in the
   communication. Now, it's reported as a network error.

 SimDag
 * Warn the user about loop dependencies in data flow of DAX files
 * Obey the control-flow dependencies of DAX files

 Cmake
 * Add option "enable_smpi" allowing to not compile SMPI.
   Probably useful for the (Mac) users experiencing a build error here
 * Improve the detection of lua5.1 and ruby1.8

 -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr> Tus, 04 May 2010 28 16:11:16 +0100

SimGrid (3.4) stable; urgency=low

 The "Easter in Cargese" release. Also known as (major changes):

  * the "se habla Java, Ruby è©±ãã¾ã, fala-se Lua (and deaf-friendly)"
    ~> bindings were greatly improved
    ~> new tracing infrastructure for better visualization introduced

  * the "Welcome to configury modernity" release.
    ~> we switched from autotools to cmake, and improved our cdash


 A more detailled list of changes follow (full detail in svn log).

 Java Bindings: Various Cleanups
  * (install java-gcj-compat-dev on debian-like to use them)
  * Remove put/get: no need to export deprecated interface in Java
    Use send/receive instead.
  * Cleanup the examples and add a README per directory
  * Remove example autoDestination (that's the only way to go now)
  * Remove example explicitDestination (was a plain copy of basic)
  * Make JniException a runtime exception, so that there is no need to
    declare the fact that you may encounter such a beast. I guess that
    nobody will ever want to survive such error.
  * Create specific errors for each MSG case of failure:
    host failure, transfer failure, timeout, task cancelled
  * Cleanup the exceptions that may get thrown by each function
  * Other internal cleanups in Java bindings. Performance still bad :/
 Ruby and Lua Bindings: create them
  * (install ruby1.8-dev/liblua5.1-0-dev on debian-like to use them)
  * That's new and great, you should try them out.
    Same functionalities than Java bindings, only even less polished
 SimDag:
  * Kill the useless "rate" argument of SD_task_get_execution_time()
    Everyone used to provide -1 as a value, it was not used, and the
    semantic of a possible use wasn't even clear.
  * SD_SCHED_NO_COST: Constant to use as cost in SD_task_schedule()
    either as comm costs or compute costs to mean that there is no
    such thing for that specific task.
  * Add a SD_task_set_name() function
  * Fix SD_task_unschedule() on typed tasks
  * Fix SD_task_get_execution_time() to return seconds, not flop*sec
  * In DAX loader, accept useless 'level' attributes to <job> since
    LIGO DAGs have them (seem to be to ease graphical representation).
 MSG:
  * Add an example masterslave_mailbox.c using send/receive and not
    the deprecated put/get interface.
  * Kill the MSG_paje_output() function. It's a noop since 2 years.
  * Kill MSG_WARNING and MSG_FATAL return codes: they were not used
    anywere in source.
  * Rename MSG_TIMEOUT_FAILURE into MSG_TIMEOUT for sake of logic
    (declare MSG_USE_DEPRECATED to still have the old name)
  * Add a MSG_task_set_data() function
  * About trace replay (see examples/msg/actions):
    - implement barrier
    - Allow to work with splitted trace files for each process
      Give the specific trace file as argument of each process,
        and call MSG_action_trace_run(NULL)
      You can still have one merged file for all processes.
    - Fix implementation of collective operations
  * Allow task_execute() on 0-sized tasks (closes #10063)
 SMPI:
  * This is the first release of SimGrid where SMPI is not considered
    beta anymore (even if some corners should still be improved)
  * Port over the new SIMIX_network submodule (internal refactoring)
  * Basic support to log events as with SMPE (use --cfg=SMPE:1)
  * Implement more missing elements of the standard:
    - MPI_COMM_SELF
    - MPI_MAXLOC MPI_MINLOC + all associated datatype MPI_DOUBLE_INT,
      MPI_FLOAT_INT, etc.
    - MPI_Address() MPI_Get_count() MPI_Type_free() MPI_Type_extent()
      MPI_Scan() MPI_Get_processor_name()
    - Added implementation of missing case for Alltoall (warning: it's
      *not* the bruck variant from OpenMPI; based on Alltoallv instead)
    - SMPI_MPI_Gather() SMPI_MPI_Gatherv() SMPI_MPI_Scatterv()
      SMPI_MPI_Reduce_scatter() SMPI_MPI_Allgather()
      SMPI_MPI_Allgatherv()
  * Bug fixes include:
    - MPI_Waitsome() was broken
    - Allow relative includes in smpicc
    - Command line cfg argument 'reference_speed' was ignored...
    - Some functions did not properly lead to auto-benching of user code
    - smpicc passes -O2 by default (just like openmpi one)
 SIMIX:
  * add SIMIX_action_suspend() and SIMIX_action_resume() functions
  * Bug fixes about timeouts during communications
  * add SIMIX_message_sizes_output() as a pimple to write to file the
    amount of messages per size. Use gnuplot to get histogram.
    Pimple because that's the only user-visible function of simix,
     defined directly in xbt.h (irk, sorry)
  * About semaphores:
     - Add a SIMIX_sem_get_capacity() function
     - Fix interactions with processe resume/suspende
     - release_forever() was stupidly broken
     - Fix SIMIX_display_process_status() for processes in a semaphore
     - Make SIMIX_sem_block_onto() user-visible
  * Refactoring context stuff:
    - Use pseudo-OOP for better modularity
    - reimplement SIMIX_process_kill() without process_schedule() so
      that the latter can take as invariant that it is called from
      maestro.
    - Merge context_start into context_new for sake of simplicity
 SURF:
  * Add a Vivaldi network model, coded live during SUD'10 ;)
  * Rename configuration variables to start a hierarchy:
    o cpu_model -> cpu/model
    o network_model -> network/model
    o workstation_model -> workstation/model
  * New configuration variables:
    o network/bandwidth_factor: correction to bandwidth
    o network/latency_factor: correction to latency
    o netwotk/weight_S: correction to the weight of competing streams
  * Add a long description to the models, that users can see with such
    argument on the command line: --cfg=cpu/model:help
  * --help-models display the long description of all known models
 XBT:
  * config: add the ability to set a default value after registration
    Does not override any previously set value (e.g. from cmd line)
  * dict: allow to have integer key and data.
    When so, you need to use the following functions
     void xbt_dicti_set(xbt_dict_t dict, uintptr_t key, uintptr_t data);
     uintptr_t xbt_dicti_get(xbt_dict_t dict, uintptr_t key);
     void xbt_dicti_remove(xbt_dict_t dict, uintptr_t key);
    In contrary to regular dicts, the key is not malloced before copy.
    Mixing scalar and regular elements in the same dict is not tested
      (but may work).
  * Allow to use xbt_dynar_shrink() to expend the dynar instead
 Tracing for Visualization:
  * SimGrid is now instrumented in order to generate a trace file for
    visualization analysis: to use it, need to compile SimGrid with the
    "tracing" option enabled, and instrument the program using SimGrid with
    TRACE_start, TRACE_category, TRACE_msg_set_task_category and TRACE_end
    (among other functions).
  * The instrumentation only traces the platform utilization for now
  * Documentation to use the tracing functions and how to analyze the
    traces with the Triva tool is written.
  * More information about: SimGrid FAQ (in the section Tracing Simulations
    for Visualization)
 Build system:
  * We moved to cmake as default build system. Autotools support will
    be dropped soon. Check the FAQ for more info about how to use it.
  * Greatly improved our cdash/ctest interactions
    Check http://cdash.inria.fr/CDash/index.php?project=Simgrid
  * Added memory checking tests with valgrind; lot of memleak fixing.
    This may be the first release of SimGrid with so few memory issues
  * Added code coverage tests.
    Our coverage is still improvable, but at least we see it on cdash.

 -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr> Wed, 28 Apr 2010 28 17:11:16 +0100

SimGrid (3.3.4) stable; urgency=low

 The "Desktop Grid needs love too" release (also called Xmas release).

 Models improvements:
 * Major speedup in the maxmin system solving by using lazy evaluation
   Instead of solving completely the maxmin system at each iteration,
     only invalidate (and recompute) the modified parts.
   This new feature is enabled in default models but you can try to
     turn it on with "--cfg:maxmin-selective-update=1" for other models.
 * Cas01 IMproved as default CPU model
   This CPU model is the same Cas01 model, but it uses the
     maxmin-selective-update flag and a heap structure to manage
     actions on SURF kernel.
   It reduces the complexity to find the next action to finish and,
     consequently, it's faster than the old Cas01.
   This is the new default CPU model (Cas01).
 * Rename the old Cas01 model to Cas01_fullupdate
   Keep the old cpu model Cas01 with the new name of Cas01_fullupdate.
   Use "--cfg=cpu_model:Cas01_fullupdate" to use the old default CPU model.
 * CpuTI (CPU Trace Integration)
   A new CPU model whose objective is simulate faster when using
     availability trace files.
   Instead of using a full featured, over engineered maxmin system for
     CPU modeling, this model does the pre-integration of traces files
     to calculate the amount of CPU power available, and so, executes
     faster than the old CPU models.
   Use "--cfg=cpu_model:CpuTI" to change to this CPU model.
 * Use LV08 as default network model since it gives better accuracy
    for small messages and shouldn't change things for big ones.
   Use --cfg=network_model:CM02 to get the previous behavior.


         ******************************************
         *DO NOT MIX 3.3.4 RESULTS WITH OLDER ONES*
         ******************************************
   * The new CPU model may changes simulations!
     The point is that events occurring at the exact same timestamp
        are not scheduled in the same order with the old and new
        version. This may be enough to completely change the execution
        of simulations in some cases.
   * The new network model will change simulations!
     This new model is more realistic than the previous one, so you
       should consider redoing your old experiments with this model.
     Sorry for the inconvenience.

 Build System:
 * Introduce the supernovae compilation mode
   When compiled that way, the whole SimGrid (or almost) is put in a
     single compilation unit and compiled in one shoot.
  This is to help gcc which has difficulties to inline stuff from one
     file into another.
  The speedup seem to be above 15%, althrough more tests are needed on
     amd64 to confirm that gain.

 MSG:
 * Port of MSG's mailbox on top of SIMIX network
   The put/get mechanism was greatly simplified on the way.

 SIMIX:
 * New SIMIX network module. Provides:
   - Mailbox: rendez-vous mechanism to find with who you want to speak
   - Synchronous send/recv: easier and hopefully faster since the
     logic is handled in the maestro process directly now
   - Asynchronous send/recv: you dreamt of it? It's here now
     Too bad that nobody cared enough to propagate the change to MSG.
 * Add semaphores as SIMIX synchronization mechanism.

 SimDag:
 * new function SD_daxload(char*) to load a DAX file
   (see http://vtcpc.isi.edu/pegasus/index.php/WorkflowGenerator)
 * Introduce typed tasks. Specify its kind and cost at creation.
   At scheduling, just give where it should be placed, and the cost
   for each involved resource is automatically computed.
   Existing constructors so far (more to come of course):
    - SD_task_create_comm_e2e() for end-to-end communication
    - SD_task_create_comp_seq() for sequential computation
   Use SD_task_schedulev() / SD_task_schedulel() to schedule them.
 * new function SD_task_dump() for debugging display
 * new function SD_task_dotty(task,FILE*) writing to file the info
   about the task in dotty format
 * SD_task_dependency_exists() can now cope with having one of its
   arguments NULL. If so, it tests whether the other argument has any
   dependency.
 * Add getters on list of preceding/following tasks:
    SD_task_get_parents(task) and SD_task_get_children(task)
 * Add getters on amount of workstations and list:
    SD_task_get_workstation_count(t) and SD_task_get_workstation_list(t)
 * Add getter on task kind: SD_task_get_kind(task)
 * Update the start_time and finish_time of tasks on completion/failure
 * Bugfix: Remove task from state swags when destroyed

 GRAS:
 * New function: void gras_cpu_burn(double flops) -- a simple CPU burner

 XBT:
 * New function: xbt_dynar_dopar(dynar,fun) to map a function over the
   dynar with one separate thread per value of the dynar.
 * Change the prototype of xbt_thread_create(), sorry.
   Added a boolean parameter indicating whether we want to join this
   thread (used in SG only for now)
 * Implement xbt_thread_join and xbt_thread_yield in SG also.

 Bug fixes:
 * GTNetS wrappers should now be usable again (and betterly tested too)
 * Fix a major regression from 3.2 where the timeout provided to
   MSG_task_put_with_timeout() was used as absolute time before which
   the comm should be done.
 * Start to fix the <cluster> tag.
   - Internal links should be good now (beside of the loopback, which
     use the private link instead)
   - paths to the external world is still rather broken
   - the <route:multi> tag is just broken. Actually that's brain-dead.
     We need sth like <route:multi src="myCluster" dst="$*-${myCluster}">
     to make it less stupid
   ** Check your platform with teshsuite/simdag/platforms/flatifier **
 * Fix a source-level compatibility glitch from 3.2: after defining
   MSG_USE_DEPRECATED, you can use the old name
   MSG_task_put_with_time_out() for MSG_task_put_with_timeout()
 * Allow to compile from the SVN with automake 1.11
 * Fix some problems when using the "start_time" tag in deployment XMLs.
 * Fix #8569: XBT/synchro.h has redundant declarations
 * Fix #8563: MSG return values and exceptions
   Introduce a MSG_TIMEOUT_FAILURE return code and use it consistently.
 * Integrate patch #8636: Obey DESTDIR when installing documentation.
   Thanks to Robson Peixoto.
 * Fix a vicious bug in dictionaries inducing that some elements were
   not freed on xbt_dict_free()

 Portability report of this version:
  * Main portability targets:
    - linux (ubuntu (804/810/910) /debian (4/5/testing) /fedora (core11))
      on (amd64/i386/ia64)
    - mac leopard on i386
    Known problems: http://cdash.inria.fr/CDash/index.php?project=Simgrid
     but nothing critical.
  * Other platforms: windows, AIX and others were not tested for this release

 Timing report of this version:
  * Lazy evaluation brings arbitrary speedup (ie, speedup depending on
    scenario parameters). From 8h to a few seconds in desktop grid settings.
  * Supernovae brings about 25% speedup on i386.

 -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr> Thu, 24 Dec 2009 19:07:39 +0100

SimGrid (3.3.3) stable; urgency=low

 The "Need for Speed" release.

 The timings done to validate the 3.3.2 were faulty.
 Instead of being 5% faster, it was 15% slower (compared to 3.3.1).

 The problem was a conversion from a manually handled vector to
   xbt_dynar_t on the critical path.
 xbt_dynar_foreach calls functions, inducing stack management crap.

 We inlined these functions and xbt_dynar_foreach is now breath taking.
 We also inlined xbt_swag_belong on the way.

 Here are some approximate speedup measurements (on master/slaves
  simulations lasting between 10s and 20s each):
   3.3.1                   -> 3.3.2: about same performance
   3.3.2                   -> 3.3.3: 40% speedup
   3.3.1                   -> 3.3.3: 40% speedup
   3.3.1 with inline patch -> 3.3.3: 30% speedup

 Our reading is that the refactoring which occurred in 3.3.2 made us
  suffer much more from the xbt_dynar_foreach low performance, but
  once we solved this, this refactoring proved to be very performance
  effective. From the 40% speedup, somehow, 10% are due to the
  inlining and 30% to the refactoring.

 That's a pitty that gcc cannot inline functions placed in other files
  alone. We have to choose between:
  - break the encapsulation (by putting private data structures and
    accessors in headers files to help gcc)
  - live with low performance
  - switch to a decent compiler such as icc (not quite possible).

 -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr> Thu, 20 Aug 2009 21:21:33 +0200

SimGrid (3.3.2) stable; urgency=low

 The "Simplicity does not preceed complexity, but follows it" release.

 The main contributors of this release were (lexical order):
   Silas De Munck, StÃ©phane Genaud, Martin Quinson, Cristian Rosa.

 SURF:
  * Extract the routing logic into its own object.
    (was dupplicated in network.c and workstation_LV07.c;
     Allows to implement other ways of storing that info)
    => kill now useless network_card concept
    - Use dynar to represent routes (instead of void** + int*)
    - kill link_set (use surf_network_model->resource_set instead)
    - Add a command-line option to choose the routing schema to use
    - Add three new models:
      * Floyd (shortest path computed at initialization)
      * Dijikstra (shortest path recomputed all the time)
      * Cached Dijikstra (shortest path computed on need)
      All these models where contributed by Silas De Munck, and are
      described in his ICCS09 paper.

  * Simplify model declaration
    (less redirections, less function to write when defining a model)
    - Factorize stuff between models:
      - model_init/exit
      - Set of resources:
        surf_model_resource_set(model)
        surf_model_resource_by_name(model, name)
    - Unify the types of models in s_surf_model_t (using an union)
    - Embeed fields of common_public directly into s_surf_model_t
    - Rename model methods:
      action_free ~> action_unref
      action_change_state ~> action_state_set
      action_get_state    ~> action_state_get
    - Change model methods into functions:
      (model)->common_public->action_use  ~> surf_action_ref

  * Implement a generic resource; use it as ancestor to specific ones
    (allows to kill duplicated code in models)
    Drawback: timer command don't need no name nor properties;
              workstation_CLM03 don't need no properties
    (but I guess we can live with those few bytes wasted)

  * Improve the action object model
    - implement a constructor avoiding dupplicated code about field
      initialization in generic_action part.

  * Kill the SDP model: it has an external dependency, is deprecated
    in flavor of modern lmm models, and didn't compile since a while

 SIMIX:
  * Relocation of the context module from XBT to SIMIX.
    (the context were decoupled from the simix processes, duplicating a lot of code)
    => a lot of code was factorized
    - less overhead is introduced during scheduling
    - simpler API for the context factory
    - the logic for process creation,destruction and manipulation was simplified
  * Simplification of the s_smx_process_t data structure.
    => accesing the simix level data associated to a process is faster now,
       and the code is a lot more readable.

 SMPI:
  * Implement some more MPI primitives:
    MPI_Bcast, MPI_Waitany, MPI_Waitall, MPI_Reduce, MPI_Allreduce, MPI_Scatter, MPI_Sendrecv, MPI_Alltoall
    -implementation: Bcast: flat or 2-ary tree (default),
                     Barrier: 4-ary tree,
                     Reduce: flat tree
                     Allreduce: Reduce then Bcast
                     Alltoall: "basic_linear" if data per proc < 3Kb, "otherwise pairwise".
                               Not yet implemented: "Bruck" for data per proc < 200b and comm size > 12
                     Alltoallv: flat tree, like ompi
                     Scatter: flat tree
  * Add support for optimized collectives (Bcast is now binomial by default)
  * Port smpirun and smpicc to OS X

 SimDag:
  * Kill SD_link_get_properties: hard to maintain and makes very little sense
    Shout out if you used it.

 GRAS:
  * Display the list of still queued messages in SG mode when existing
    the process.

 XBT:
  * Add xbt_set_get_by_name_or_null() [Silas De Munck]
  * Add xbt_graph_node_get_outedges() [Silas De Munck]
  * Add xbt_str_from_file(FILE*)
  * Add xbt_dict_get_key achieving a linear reverse search
  * Remove the context module

 Portability report of this version:
  * Main portability targets:
    - Linux(debian)/x86/context
    - Linux(debian)/x86/pthreads
    - Linux(debian)/amd64/context
    - Linux(debian)/amd64/pthreads
    On these, we still have the eratic breakages of gras/pmm and
      amok/saturate_sg reported in previous version. We still think
      that the tests are the cause of the fault, not the tested code.

    - Mac OSX Leopard/x86/context
    Still false negative in tesh autotesting.
    Smpi still fails, but this time because readlink does not accept -f
    Everything seems to work properly beside of that.

  * Exotic platforms:
    - AIX version 5.3 (only tested contexts this time)
      Smpi still fails there because mktemp is not installed.
      Everything seems to work properly beside of that.
    - OpenSolaris 11
      I managed to compile it for the first time, but several breakages.
      Won't delay the release for this exotic platform.

  * Windows: it's still lagging behind. If you want to help, please
    stand up.

 Timing report of this version:
  This version seem to be more than 5% faster than 3.3.1 (on linux
    64bits with contexts). The gain is less than expected, we are
    investigating this for next release.

 -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr> Wed, 19 Aug 2009 17:07:12 +0200

SimGrid (3.3.1) stable; urgency=low

 OVERALL CHANGES:
  * Implement a --cfg-help to show existing configuration variables
  * Build chain do not require doxygen in maintainer mode

 GRAS:
  * fix a bug on struct sizeof computation, which prevented the
    exchange of arrays of structs in some conditions
    - added a regression test about this in datadesc_usage
  * Allow the exchange of 0-long dynamic vectors.
    - for that, use -1 as indicator of dynamic size instead of 0
    - This implied to change any size from unsigned long to long,
      reducing a bit communication abilities, but I guess that with
      64bits being quite common, this is more than enough.
    - This also induce a protocol change, thus bumping network protocol
      version from 0 to 1 (if we have external users, we have to get
      clean on that point too ;)
    - added two regression tests about this in datadesc_usage
  * Be more verbose when propagating local exceptions
    This helps debugging.
  * Display the status of simulated processes when receiving SIGINT in
    simulation mode

 MSG:
  * Allow to control the simulation from a trace file.
    New functions MSG_action_register() and MSG_action_trace_run()
    The first one allows to associate a function execution to each
     kind of action while the second one parses a trace file and
     triggers the corresponding actions within the system.
    For now, only a toy example is provided in examples/msg/actions
  * Add an example of process migration in examples/msg/migration
  * Fix a bug in task exchange which broke MSG_task_get_sender()
    Add a teshsuite regression test for that.
    [Bug: if MSG_task_get_sender() is called after sender exit,
     bad things happen]
  * Fix a bug which prevented suspend/resume to work properly
  * Display the status of simulated processes when receiving SIGINT
    This fixes a regression of v3.3. due to the introduction of SIMIX
  * Bug fixing in failure management:
    - trace could not start by a failure at time 0
    - failure during communications were not working

 SIMIX:
  * Add SIMIX_process_set_name() to change the name of the current
    process in the log messages.
  * Store smx_hosts in a dict since we only retrieve them by name
  * Move the configuration infrastructure to surf

 SIMDAG:
  * Move the configuration infrastructure to surf

 SMPI:
  * Massive internal cleanups:
    - Store internal structures on processes instead of hosts (allows
      to have more than one process per host, in addition of being more
      logical)
    - Cleanup the initialization/finalization process
    - Kill a whole bunch of unneeded synchronization:
      processes run in exclusive manner within the simulator
    - Move queues from global tables to process data fields
  * Improve smpirun:
    - now accept -platform and -hostfile arguments
    - Pass the right rank value to processes according to the hostfile
  * Compile the examples by default, and use them as regression tests
  * Implement MPI_Wtime()
  * Change the reference speed to a command line option

 SURF:
  * TCP_gamma can now be specified as command line option using
    --cfg=TCP_gamma:10000000.0
  * Change the --surf-path cmd line option into --cfg=path:

 XBT:
  * Also include strbuff from xbt.h public header
  * xbt_ex_display(): do not free the exception after displaying
    This allows to do more with the given exception afterward.
    Users should call xbt_ex_free() themselves.



 Portability report of this version:
  * Main portability targets:
    - Linux(debian)/x86/context
    - Linux(debian)/x86/pthreads
    - Linux(debian)/amd64/context
    - Linux(debian)/amd64/pthreads
    These targets fail about 1/10 of times on gras/pmm, but we believe
      that this is because of the test, not because of SimGrid.
    amok/saturate_sg fails even more rarely, and the test may not be
      the problem.

    - Mac OSX Leopard/x86/context
    The test suite still spits tons of errors because some obscure
      force prevents us from removing the temporary directories
      arguing that they still contain some metadata I've never heard of.
    Smpi fails because seq is not installed.
    Everything seems to work properly beside of that.

  * Exotic platforms:
    - AIX version 5.3 (both contexts and pthread)
      Smpi still fails there because mktemp is not installed.
      XML inclusions seems rosty on AIX.

  * Windows: it's still lagging behind. If you want to help, please
    stand up.

 -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>  Sat, 27 Jun 2009 00:14:30 +0200

SimGrid (3.3) stable; urgency=high

 OVERALL CHANGES:

  * JAVA BINDINGS for MSG (you dreamt of them? We made them)
    [Malek Cherier & Mt]

  * Introduce the SIMIX module: factorize code between MSG and GRAS.
    [Bruno Donassolo]

    Until now, GRAS were using MSG as an interface to SURF. It was
    quite difficult because both interface have several differences
    (MSG channels vs GRAS sockets were the most notable point).

    This also opens the gate to SMPI (which should occur soon) and speed
    up simulations by to 40% (even if it were not the main goal).

    **************************************
    *DO NOT MIX 3.2 RESULTS WITH 3.3 ONES* Simix may changes simulations!
    **************************************
    The point is that events occurring at the exact same timestamp are
    not scheduled in the same order with the old and new version. This
    may be enough to completely change the execution of simulations in
    some cases. Sorry for the inconvenience.

  * Cleanup and upgrade the XML format to push further scalability
    issues (check http://hal.inria.fr/inria-00256883/ for more info)

  * Improve the testing infrastructure with tesh. Now a very large part of
    the code is tested not only by being run but also by checking that the
    output match an expected output [Mt].

  * Move on to FleXML v1.7 for the embeeded XML parsers. This version
    is really less memory-demanding, which should allow you to use
    larger files in SimGrid [AL].

  * Inform valgrind about our contexts, so that it becomes usable
    with the default (and more effecient) version of SimGrid
    [contributed by SÃ©kou Diakite, many thanks]

 GRAS:
  * Introduce a listener thread in charge of receiving incoming
    messages from the network. It allows to overlap communication and
    computation but most notably, it removes some stupid deadlocks due
    to the fact that so far, a process could not send and receive at
    the same time. This made most non trivial communication schema
    impossible.
  * Convert the PIDs from long int to int to match the MSG ones (and
    linux ones too) [Mt]
  * New function: gras_agent_spawn() to launch a new process on
    current host. Only working in simulation for now. [Mt]
  * New function: gras_os_hostport() returning a constant form (ie,
    not needing to be freed) of "gras_os_hostname():gras_os_myport()"

 XBT:
  * Make the backtrace of exceptions more human readable [Mt]
  * New module: xbt/str [Mt]
    a ton of string utility functions (split, join, printf to a newly
    allocated buffer, trim, etc)
  * New module: xbt/hash [Mt]
    SHA1 hashing algorithm (more to come if needed)
  * New module: xbt/synchro [Mt]
    synchronization tools (mutex and conditions) working the same way
    in simulation and in real life (mainly useful for GRAS, but not
    only).
  * New module: xbt/queue [Mt]
    classical producer/consumer synchronization scheme
  * xbt_dynar_new_sync() creates a synchronized dynar. All access
    (using the classical functions will get serialized) [Mt]
  * Make dictionary internal table dynamic. No need to specify its size
    anymore; functions xbt_dict_new_ext() and xbt_dict_hashsize_set()
    thus dropped. [Mt].
  * Make sure the log channels are organized as a tree under windows
    (because of ANSI C compatibility issue, any channel were child of
     root directly) [Mt].

 SURF:
  * Cleaned many thing in surf and fixed a few bugs [AL].
  * Add a nice command line configuration mechanism to compose models [AL].
  * Add a new model for parallel tasks (ptask_L07) that is less buggy than
    the previous one (KCCFLN05). It relies on something that looks like
    a max-min sharing mechanism but cannot be written as such. A new solver
    was thus designed [AL].
  * Add a new solver to lmm. Based on Lagrange optimization and
    gradient-based descent, it enables to efficiently maximise systems s.a

     sum f_i(x_i) s.t Ax<= b  with A_{i,j}>=0 and f_i a concave function.

    This solver enables to propose two new network models for TCP Reno and
    TCP Vegas based on Low's work. These models still need to be fully
    tested though [Pedro Velho].

 SIMDAG [AL]:
  * Bug fix in SD_simulate. Now the time bound given as argument is
    used.
  * Use the new parallel task model (ptask_L07) as default.
  * Use the SURF command line configuration mechanism.
  * 0-size tasks (for synchronization) should now work.

 -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr> Sun Apr 12 05:20:36 CEST 2009

SimGrid (3.2) stable; urgency=high

  OVERALL CHANGES:
   * Port to windows.
     We still experience issues on this platform, but we believe that at
     least MSG is usable.

  GRAS API BREAKAGE (for simplification purpose, sorry):
   * the gras_msgtype_by_name is not used anymore. Instead of
       gras_msg_send(toserver, gras_msgtype_by_name("request"), &request);
     you can write (and must)
       gras_msg_send(toserver, "request", &request);
   - If you still want to pass a gras_msgtype_t to the function (to cache
     the type and avoid the lookup time), use the gras_msg_send_() variant.
   - Impacted functions:
     gras_cb_register, gras_cb_unregister, gras_msg_send, gras_msg_wait,
     gras_msg_rpccall, gras_msg_rpc_async_call, gras_msg_wait_ext
   * The callbacks are now expected to return 0 when everything went well
     (just like the main() function)

  GRAS new features and improvements:
  * New module mechanism where user code can use per process globals [Mt]
    This is similar to gras_userdata_*() functions, but for libraries. It
      factorize some code developped over and over in the examples and AMOK.
    It has still to be documented and used (only amok/peermanagement is
      converted for now).
  * Fix a vicious bug in the TCP buffering mechanism which leaded to message
    loss when they were small enough to fit into the buffer and sent quickly
    enough so that they can all get received in one shoot.
  * gras_datadesc_by_name and gras_msgtype_by_name: now raise an exception
    if not found. Use the *_or_null() variant for the old semantic.
  * In gras_msg_handle, do not discard messages without callback.
    They are probably messages to be explicitly awaited later (ie, proofs of
    mis-synchronization in userland since they are sent before being awaited)
    No big deal usually.
  * gras_socket_meas_send/recv: semantic changed!
    The numerical arguments used to be (1) the total amount of data to send
    and (2) msg_size. This was changed to (1) msg_size and (2) amount of
    messages. This was need for the fool willing to send more than MAXINT
    bytes on quite fat pipes.

  AMOK:
  * Do really rename the hostmanagement module to peermanagement. [Mt]
    Ie, rename functions from amok_hm_* to amok_pm_*. This breaks the API,
    but this is rather new and this was documented in the module
    documentation (poor excuses, I admit)
  * Bandwidth measurement semantic changed! This follows the changes to
    gras_socket_meas_send/recv explained above.

  SIMDAG:
  * A sequential mode has been added to the workstations. When a workstation
    is in sequential mode, it can execute only one task, and the other tasks
    are waiting in a FIFO. [Christophe Thiery]

  SURF:
  * The KCCFLN05 workstation model now handles parallel tasks. It is the
    model for SIMDAG. [Christophe Thiery]
  * Bug fix in the maxmin solver: Some values were close to 0 instead of
    equal to 0, which caused some bad behaviors in
    saturated_constraint_set_update. I now use a threshold mechanism like in
    surf. [AL]

  XBT:
  * When running manually src/testall, you select specific units [Mt]
    testall is the result of our cunit mechanism, and should replace all
    the scripty thingy around since bash don't run easily on billware.

  * A mallocator system has been added. [Christophe Thiery]
    Mallocators allow you to recycle your unused objects instead of freeing them
    and allocating new ones.

  Documentation update:
  * FAQ reworking + New FAQs:
    - "Valgrind spits tons of errors!" [Mt]
    - "How to repport bugs" [Mt]
    - "Cross-compiling a Windows DLL of SimGrid from Linux" [Mt]
    - "What is the difference between MSG, SimDag, and GRAS?" [Mt]
    - Communication time measurement within MSG [AL]
    - I experience weird communication times when I change the latency [AL]
  * GRAS tutorial [Mt]
    It contains:
     - an introduction to the framework and to the used communication model
     - an initiatic tour introducing the most proheminent features:
       o Part 1: Bases
         . Lesson 0: Installing GRAS
         . Lesson 1: Setting up your own project
       o Part 2: Message passing
         . Lesson 2: Exchanging simple messages
         . Lesson 3: Passing arguments to the processes (in SG)
         . Lesson 4: Attaching callbacks to messages
         . Lesson 5: Using globals in processes
         . Lesson 6: Logging information properly
         . Lesson 7: Using internal timers
         . Lesson 8: Handling errors through exceptions
         . Lesson 9: Exchanging simple data
         . Lesson 10: Remote Procedure Calling (RPC)
         . Lesson 11: Explicitly waiting for messages
         . Recapping of message passing features in GRAS
     - A HOWTO section containing:
       o HOWTO design a GRAS application
       More are due, of course. They will come latter. In the meanwhile, you can
       check the examples which are still here.

 -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr> Fri Mar 16 21:11:46 CET 2007

SimGrid (3.1) stable; urgency=high

  General:
  * Port to gcc 4.x
    There was a stack corruption somewhere, visible only when optimizing
    with these versions. [Vince]

  SIMDAG:
  * This is a NEW module! SimDAG (SD for short) is a revival of the old SG
    module that enabled to play with Directed Acyclic Graphs. It is built
    directly on top of SURF and provides an API rather close to the old
    SG. Some old codes using SG are currently under rewrite to check that
    all needful functions are provided. [Christophe Thiery]

  SURF:
  * Complete rewrite of the KCCFLN05 workstation model. It is now an
    extension of the classical CLM03 model that gracefully handles
    failures. This is now the default model for MSG and GRAS. It doesn't
    handle parallel tasks yet though. [AL]
  * Bug fix: Weights were not correctly set in the network part.
    WARNING: This may have resulted in incorrect results with simulations
    where there are more than one flow on a given link. [AL]

  SURF, MSG, GRAS:
  * After a (long ?) discussion on simgrid-devel, we have decided that the
    convention we had on units was stupid. That is why it has been decided
    to move from (MBits, MFlops, seconds) to (Bits, Flops, seconds).
    WARNING: This means that all previous platform files will not work as
    such with this version! A warning is issued to ask users to update
    their files. [AL]
    A conversion script can be found in the contrib module of the CVS, under
    the name contrib/platform_generation/surfxml_update.pl [MQ]

  MSG,GRAS:
  * Bug fix: Processes were started in reverse order, wrt deployment file.
    WARNING: if your code relies on this bug, please fix it.    [AL]
  * Bug fix: Add a test in MSG_task_execute to stop whenever a task is
    being executed on two different locations.                  [AL]
  * Bug fix: Failures are now better supported thanks to Derrick's tests
    (there was many failure situations I hadn't thought of and that weren't
    correctly handled). [AL]
  * New function: MSG_host_is_avail indicates you whether a given m_host_t
    is up or down. [AL]

  GRAS:
  * New! a real RPC mechanism, as it ought to be since too long. [MQ]
      Exception occurring on server-side are propagated back to client (!).

    API CHANGE: the callback changed their prototype. Change:
        int my_handler(gras_socket_t expeditor, void *payload_data) {
      to:
        int my_handler(gras_msg_cb_ctx_t ctx  , void *payload_data) {
          gras_socket_t expeditor=gras_msg_cb_ctx_from(ctx);
      and you're set.
  * New! function: gras_msg_handleall to deal with all messages arriving
      within a given period.
  * New! function: gras_socket_server_range to get a server socket in a
    range of port numbers (ease to avoid port number conflicts) [MQ]
  * New! gras processes display their backtrace when they get a SIGUSR1
      or when Ctrl-C is pressed. Use Ctrl-C Ctrl-C to exit.
      Sweet to debug RL processes [MQ]

  AMOK:
  * Bandwidth module:
    - Do not force experiment sizes to be expressed in kb, or it becomes
      impossible to measure the latency this way (needs one byte-long tests)
    WARNING: this changes the amok_bw_* function semantic. [MQ]
    - Implements the link saturation stuff. [MQ]
  * Peer management module:
    New! module factorizing code that we wrote over and over [MQ].

  XBT:
  * New module: cunit (my jUnit implementation in ansi C) [MQ]
    - Test units are placed directly into the library code, they get extracted
      automatically and placed into the src/testall binary.
    - Convert most of the XBT tests to this system.
  * New functions: xbt_dynar_getfirst_as() and xbt_dynar_getlast_as() [MQ]
  * XML parsing: rewrote parts of flexml to enable multiple xml parsers to
    live in the same C code. This required to change a little bit the API
    of surfxml parsing but shouldn't be an issue for end-users. [AL]
  * New module: sparse graph structure with basic algorithms (this is work
    in progress and the API is not considered to be frozen yet). [AL]
  * Display more information on backtraces: source line & function names are
    now displayed just like valgrind does (rely on addr2line tool) [MQ]
  * New function: xbt_backtrace_display(). Sweet while debugging [MQ]
  * Reworked a little bit some #include statements to load only required
    headers. Some user code that relied on SimGrid to include stdlib or
    stdio may need to include it by themselves. [AL]
  * Fixed xbt/log.h. A missing SG_BEGIN_DECL prevented compilation with
    g++. [AL]
  * Renamed xbt_host_t into xbt_peer_t since it betterly describes what I
    meant. This breaks the API of AMOK and of xbt/config. Sorry about this,
    but I guess that almost nobody used those parts. [MQ]

 -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr> Fri, 14 Jul 2006 01:32:27 +0200

SimGrid (3.0.1) stable; urgency=low

  XBT:
  * Unfortunately, I had missed 5 misnamed functions:
      xbt_fifo_item_t xbt_fifo_newitem(void);
      void xbt_fifo_freeitem(xbt_fifo_item_t);
      xbt_fifo_item_t xbt_fifo_getFirstItem(xbt_fifo_t l);
      xbt_fifo_item_t xbt_fifo_getNextItem(xbt_fifo_item_t i);
      xbt_fifo_item_t xbt_fifo_getPrevItem(xbt_fifo_item_t i);
    They're now deprecated. Please use their new versions:
      xbt_fifo_item_t xbt_fifo_new_item(void);
      void xbt_fifo_free_item(xbt_fifo_item_t);
      xbt_fifo_item_t xbt_fifo_get_first_item(xbt_fifo_t l);
      xbt_fifo_item_t xbt_fifo_get_next_item(xbt_fifo_item_t i);
      xbt_fifo_item_t xbt_fifo_get_prev_item(xbt_fifo_item_t i);
    [AL]
  * Bugfix: really disconnect fifo items which are remove_item()ed [AL]
  * Documentation: xbt_log module unmercifully reworked [MQ]
  * Bugfix: there was a problem with the ending of contexts with
    the pthread backend. It caused some weird deadlock or behavior
    depending on the pthread implementation. [AL]
  * Bugfix: get the exceptions raised in the simulator repport where
    and why they come from when they are not caught in time [AL, MQ]

  SURF:
  * Bugfix: Do repport the error when two non-connected hosts try to
    exchange data (Thanks to Flavien for stumbling into this one) [AL]

  SURF:
  * Add additionnal checkings on communications. Assert that two
    communicating hosts are connected by a set of links... [AL]

  MSG:
  * Add additionnal checkings on channel values in communication [AL]
  * New: MSG_task_get_source to see on which host a task was generated [HC]
  * New: int MSG_task_probe_from_host(int channel, m_host_t host): returns
    the number of tasks waiting to be received on channel and sent
    by host. [AL]
  * New: MSG_error_t MSG_task_get_from_host(m_task_t * task, int channel, m_host_t host);
    waits for the first task coming from a given host.. [AL]

  GRAS new functionnalities: [MQ]
  * Enhance the parsing macro to allow the size of multidimentional objects
    to be given thru annotations.
  * New example (and documentation): Matrix Multiplication a la RPC
    (as when I was young!) and fix a bunch of bugs found on the way.

  GRAS performance improvements: [MQ]
  [DataDesc]
  * Reduce the amount of cbps creation/destruction by making it static to
    datadesc_send/recv() and using a (newly created) cbps_reset (based on
    dynar_reset ())
  [Virtu]
  * Change libdata to a set so that we can search for stuff by ID (and thus
    reduce the insane amount of dict lookups)

  [Transport]
  * Actually implement gras_datadesc_copy() so that we don't have to mimick
    RL communication on top of SG since it's so uneffective.
    It may also be used for inter-thread communication in RL, one day.
  * Use gras_datadesc_copy() to exchange messages on top of SG
    Allows to:
    - improve message exchange performance on top of SG
    - deprecate transport_plugin_sg.c:gras_trp_sg_chunk_send() & recv()
  * Don't exchange on the network the size of the used part of buffer,
    instead, specify the possible buffer size to read().
    Advantages:
     - reduces the amount of read/write calls (one pair per exchange)
     - reduces the amount of exchanged data (the size)
     - allows to retrieve all arrived data on receiver side, if we don't need
       it right now (subsequent read will peek the buffer)
     - allows the receiver to proceed with the beginning of the stream before
       everything is arrived
     - make it possible to build an iov transport (using readv/writev)
    Extra difficulty:
     - take care of the data with non-stable storage (like stacked data),
       and bufferize them.
  * If possible, TCP send uses vector I/O (when writev() is here)
     - Don't use it for receive since we send data sizes and data on the
       same stream, so we wouldn't be able to chain large amount of chunks
       before having to flush the stuff to read the size.
  * Rework the transport plugin mechanism to simplify it and reduce the
    amount of pointer dereferencement when searching for the right function
    to use.

  * I guess that now, we do almost as few system calls as possible while
    doing as few data copy as possible.

    To improve it further, we could try to send all the sizes first and then
    all the data (to use iov on receiving size), but it's only a partial
    solution: when you have 2 dimensional data, the sizes of the second
    dimension is data of the first dimension, so you need 3 streams.

    I'm not sure the potential performance gains justify the coding burden.

 -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>  Fri, 21 Oct 2005 14:42:20 +0200

SimGrid (3.00) stable; urgency=high

 SURF:
  * New! Give the possibility to hijack the surf parser and thus bypass
    MSG_create_environment and MSG_launch_application. Have a look at
    examples/msg/msg_test_surfxml_bypassed.c to see how it can be done.

 -- Arnaud Legrand <simgrid-devel@lists.gforge.inria.fr>  Sat, 20 Aug 2005 23:25:25 -0700

SimGrid (2.96) unstable; urgency=low

  AKA SimGrid 3 rc 2.

  XBT:
  * New! Exception handling with setjmp or such (code from OSSP ex) [MQ]
    This deprecates the xbt_error_t mechanisms.
    It modifies (simplifies) all XBT and GRAS API.
    MSG API keeps unchanged (exceptions raised by XBT are caught from
     within MSG and masked with existing error handling facilities)

  SURF:
  * New! Add a FATPIPE model. [AL]
  * New! Add a parallel task model. [AL]
  * New! Add automatically a loopback interface (in the default
    network model) if none was precised.

  MSG
  * Bugfix: MSG_process_resume now works with the current running process.
    [AL]
  * New! Add MSG_parallel_task_create and MSG_parallel_task_execute. [AL]
  * Modification of MSG_task_get_compute_duration. Once a task has been
    processed, the value returned by this function is now equal to 0. [AL]
  * New! Add double MSG_task_get_remaining_computation(m_task_t task) and
    MSG_error_t MSG_task_cancel(m_task_t task). Add a state
    (MSG_TASK_CANCELLED) to MSG_error_t corresponding to the cancelation
    of a m_task. For now, MSG_task_cancel only works with computation
    tasks. [AL]
  * New! Add double MSG_get_host_speed(m_host_t h) that returns the speed
    of the processor (in Mflop/s) regardless of the current load on the
    machine. [AL]
  * API Change: use proper naming convention for MSG_getClock and
    MSG_process_isSuspended: MSG_get_clock and MSG_process_is_suspended.
    [AL]
  * New! Add void MSG_task_set_priority(m_task_t task, double priority).
    This function changes the priority of a computation task. This priority
    doesn't affect the transfer rate. A priority of 2 will make a task
    receive two times more cpu power than the other ones. This function
    has been added to suit the needs of Nguyen The Loc and hasn't been that
    much tested yet. So if it fails, please report it and send me your code.
    [AL]
  * API Change: removed all functions and types that were marked "deprecated"
    since many months. Renamed MSG_global_init_args to MSG_global_init.

 -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>  Mon,  8 Aug 2005 17:58:47 -0700

SimGrid (2.95) unstable; urgency=low

  XBT
  * Steal some nice code to GNU pth to fix context detection and usage [AL]
  * Cleanup in the xbt_config API; add configuration callbacks. [MQ]
  * Cleanup in the initialization API: the unused "defaultlog" is dead. [MQ]

  SURF
  * Bugfix: Allow absolute paths for platform description files [MQ]
  * Bugfix: do free the variables after use. Leads to drastic performance
    improvement [AL]
  * Implement max_duration (ie, timeouts) on resources [AL]

  MSG
  * Implement MSG_config to configure MSG at runtime. xbt_cfg test on a real
    case ;) [MQ]
  * Implement MSG_channel_select_from() to help GRAS now that SURF provide
    the needed support (timeouts) [AL]

  GRAS (new features)
  * Implement measurement sockets. You can now get the bandwidth between two
    hosts thanks to AMOK (see below). [MQ]
  * gras_datadesc_dynar() builds a dynar type descriptor, allowing to send
    dynar over the network (yeah) [MQ]
  * Real (even if simplistic) implementation of gras_os_myname() on RL [MQ]
  * simple/static token-ring example. [Alexandre Colucci and MQ]
  * Use MSG_channel_select_from() and remove the *slow* hack we had to put
    in place before [MQ]

  GRAS (bug fixes)
  * Differentiate the types "char[22]" and "unsigned char[22]" in automatic
    type parsing. "short" and "long" modifiers were also ignored; other
    modifier (such as reference level) are still ignored. [MQ]
  * Embeed the buffer size within the buffer itself on SG. [MQ]
    That way, send() are atomic and cannot get intermixed anymore (at least
    the ones which are less than 100k; bigger messages still have the issue)
  * Array size pushed by the field, not by the field type (or each
    and every long int will push stuff to the cbps) [MQ]
  * use select() to sleep since it allows to portably sleep less than one
    second. [MQ]

  GRAS (minor cleanups)
  * <project>.Makefile.local (generated from gras_stub_generator) |MQ]:
    - Do clean .o files
    - Compile with -g
  * Type Callbacks now receive the gras_datadesc_type_t they work on as argument.
  * type category 'ignored' killed as it was never used and were difficult
    to transmit.
  * whether a type can cycle or not is now a flag, leaving room for more
    flags (as "ignored", if we feel the need one day ;)
  * Rename raw sockets to measurement sockets since "raw" has another
    meaning in networking community.

  AMOK
  * Advanced Metacomputing Overlay Kit introduction. It is based over GRAS
    and offers features not belonging to GRAS but that most applications
    need. One day, it may be a set of plugins loadable at runtime.
  * New module: bandwidth
    bandwidth measurement between arbitrary nodes running this module. [MQ]

 -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>  Thu, 30 Jun 2005 16:29:20 -0700

SimGrid (2.94) unstable; urgency=low

  The first beta release of SimGrid 3 !

  >>>Arnaud<<<
  (documentation)
  * Update the main page and the FAQ. Adding references to gforge.

  (gras)
  * Add a gras_os_getpid function.

  (msg)
  * Add MSG_task_get_compute_duration() and MSG_task_get_data_size()
  * Extend the logs so that they also print PID, hostname, date, ... if
    available.
  * Convert the MSG example to the use of xbt_logs instead of PRINT_MESSAGE,
    and kill the old version which were in testsuite/
  * Rewrite tools/MSG_visualization/colorize.pl for using with logs instead
    of PRINT_MESSAGE

  (xbt)
  * Add xbt_os_time(). As the rest of xbt/portability, this is not public
    for users. Instead, each programming environment (GRAS, MSG,...) use it
    when needed to provide such a feature to users.
    Don't shortcut the mechanism or you will also shortcut the virtualization
    you need on the simulator.

  >>>Martin<<<
  (infrastructure)
  * Cleanups in configury with regard to compile optimization/warning flags.
    Also add -fno-loop-optimize to any powerpc since it's the optimization
    killing gcc (< 3.4.0).
  * Doxygen cleanups: move MSG examples, kill the second Doxygen phase
    needed by MSG examples complications
  * Borrow configury beautifications from PHP

  (xbt)
  * Bugfix: XBT_LOG_NEW_DEFAULT_CATEGORY now compiles without compiler
    warning (thanks loris for stumbling into this one).
  * Bugfix: stop loading private headers (gras_config.h) from the public
    ones (xbt/swag.h).

  (gras)
  * Change SIMGRID_INSTALL_PATH to GRAS_ROOT in Makefiles generated for user.
  * Rename gras_get_my_fqdn to gras_os_myname and implement it in the simulator
    RL would imply a DNS resolver, which is *hard* to do in a portable way
    (and therefore delayed).
  * Implement a real timer mechanism and use it in timing macros. This allows
    to avoid rounding errors and get a 0.000005 sec precision in timing
    macros. While I was at it, various cleanups:
     - allow to declare more than one timed section per file (fix a stupid bug)
     - move some private declaration to the right place
     - merge conditional execution and timing macros into emulation module
     - document the module
     - make sure the module cleanups its mess on gras_exit
  * Documentation improvements:
     - (new) how to compile applications using GRAS
     - (new) emulation support (timing macros)

 -- Da SimGrid team <simgrid-devel@lists.gforge.inria.fr>  Fri, 13 May 2005 10:49:31 +0200

SimGrid (2.93) unstable; urgency=low

  Alpha 4 on the path to SimGrid 3 (aka the "neuf-trois" version)

  [Arnaud]
   - Use Paje properly where used. Still to be sanitized properly.
   - Portability fix: Add an implementation of the contexts using pthread

  [Martin]
  (misc)
   - Add xbt_procname(): returns the name of the current process.
     Use it to show the current process's name in all logging.
  (infrastructure)
   - fix detection of older flex version and the reaction, since we do
     depend on modern ones (we use lex_destroy)
   - Better separation of SG and RL in the libs: remove all simulation code
     from libgras. As a result, this lib is now only 200k when stripped.
     Some of the xbt modules may also be duplicated (two sets and such) and
     should be cleaned/killed before SG3.
   - Insist on using xlC on AIX because of weird problems involving gcc there.
   - Cleanup the make remote stuff. This is now done by scripts
     tools/graspe-{master,slave} (GRAS Platform Expender). This is still
     mainly for our private use, but we're working on changing them to user
     tools, too.
  (gras)
   - Bugfix: flush the socket on close only if there is some *output*.
   - Bugfix: flush idempotent when there's nothing to send (don't send size=0)
  (msg)
   - Add MSG_task_get_name. The task names are mainly for debugging purpose,
     but anyway.

 -- SimGrid team <simgrid2-users@listes.ens-lyon.fr>  Fri,  4 Mar 2005 14:32:37 -0800

SimGrid (2.92) unstable; urgency=low

  Alpha 3 on the path to SimGrid 3

  [Arnaud]
  (gras)
   - New! First try of benchmarking macros.
   - New! First try so that gras_stub_generator generate deployment and
     remote compilation helpers.
  (msg)
   - Bugfix: Initialization fix in msg_test.

  [Martin]
  (surf)
   - Bugfix: applied patch to lexer so that it doesn't need a huge heap.
  (xbt)
   - Bugfix: let dicts work with NULL content (_foreach didn't) and cleanups
  (gras)
   - API Change: gras_os_sleep to take the amount of seconds as a double.
     Accepting an int was error prone since it was the only location where
     seconds were coded as such. It leaded to damn rounding errors.
   - Bugfix: Hard to belive that timers ever worked before this.

 -- SimGrid team <simgrid2-users@listes.ens-lyon.fr>  Wed, 23 Feb 2005 22:09:21 +0100

SimGrid (2.91) unstable; urgency=low

  Alpha 2 on the path to SimGrid 3

  [Arnaud]
  (surf)
   - Bug fix in the lmm_solver.
  (msg)
   - New! Interface to Paje (see http://www-id.imag.fr/Logiciels/paje/)
     through the function MSG_paje_output.
   - New! Introducing two new functions MSG_process_kill() and MSG_process_killall().
   - It is possible to bound the rate of a communication in MSG with
     MSG_task_put_bounded() (was already in the previous version but I had forgotten
     to write it in the changelog).
   - Bug fix to let GRAS run on top of MSG until we move it directly on top
     of the SURF.

  [Martin]
  (infrastructure)
   - Various cleanups to the autotools stuff
   - Begin to move Gras examples to examples/gras/
   - Let make distcheck work again (yeah!)
  (documentation)
   - documentation overhauled using doxygen.
     gtk-doc-tools is dead in SimGrid now.
   - Automatically extract all existing logging categories, and add the list
     to the documentation (long standing one, to say the less)
  (gras)
   - Cleanup the known architecture table. Reorder the entries to group what
     should be, and use a more consistent naming scheme.
     (some of the test dataset are still to be regenerated)
   - New! Allow library to register globals on each process just as userdata
     does.
      This is implemented using a xbt_dict and not a xbt_set, so we loose the
       lookup time (for now).
      Use it in msg and trp.
      This cleans a lot the internals and helps enforcing privacy of the
       headers between the gras components.
   - New! Add a timer mechanism, not unlike cron(8) and at(1).
   - Bugfix: gras_os_time was delirious in RL.
   - Bugfix: gras_trp_select/RL don't run into the wall when asked to select
     onto 0 sockets.
   - Reenable GRAS now that it works.

 -- Arnaud Legrand <Arnaud.Legrand@imag.fr>  Mon, 14 Feb 2005 14:02:13 -0800

SimGrid (2.90) unstable; urgency=low

  Alpha 1 on the path to SimGrid 3

  * It is a long time since the last release of SimGrid. I'm sorry about
    that but as I had told you, I was rewriting a lot of things. I apologize
    to those who had been reporting bugs to me and that I had not answered.
    If your bug is still in the new version, please tell me. Here is a
    summary of the main changes.

  * REVOLUTION 1: The SimGrid project has merged with the GRAS project
    lead by Martin Quinson. As a consequence SimGrid gains a lot in
    portability, speed, and a lot more but you'll figure it out later.
    SimGrid now comprises 3 different projects: MSG, GRAS and SMPI.
    I wanted to release the new MSG as soon as possible and I have
    broken GRAS, which is the reason why, for now, only MSG is fully
    functional. A laconic description of these projects is available
    in the documentation.

  * REVOLUTION 2: I have removed SG and I am now using a new simulation
    kernel optimized for our needs (called SURF but only the developers
    should use it). Hence, MSG is now roughly 30 times faster and I think
    that by rewriting a little bit MSG, I could event speed it up a little
    bit more. Beside the gain in speed, it is also much easier to encode a
    new platform model with SURF than it was with SG. More to come...

  * REVOLUTION 3: I have tried to change a little as possible the API of
    MSG but a few things really had to disappear. The main differences
    with the previous version are:
       1) no more m_links_t and the corresponding functions. Platforms are
         directly read from an XML description and cannot be hard-coded
         anymore. The same format is used for application deployment
         description. The new format is described in the documentation.
         Have a look in tools/platform_generation. There is a tiny script
         that converts from the old platform format to the new one. Concerning
         the application deployment format, parsing the old one is tricky.
         I think most of you should however be able to convert your files.  If
         it is really an issue, I can write a C code that does the conversion.
         Let me know.
       2) the toolbox tbx does not exist anymore. We now have a library
          with much more data-structures but without the hash-tables (we have
          dictionaries that are much faster).

 -- Arnaud Legrand <Arnaud.Legrand@imag.fr>  Mon, 31 Jan 2005 10:45:53 -0800

*****************************************************************************
* Follows the old GRAS changelog. It does not follow the same syntax, but I *
* don't feel like converting the oldies. (Mt)                                *
*****************************************************************************

2005-01-31 Arnaud
  Version 2.90: "the long awaited one"
  - Finished rewriting and debugging MSG. Rewrote the documentation.
  - disable GRAS for now since it needs to be ported to the newest SG

2004-12-16 Martin
  - Finish the port to windows (using mingw32 for cross-compile)

2004-11-28 Arnaud
  - Main loop and datastructures of SURF. A cpu resource object is
    functional. Surf can thus be used to create cpu's with variable
    performance on which you can execute some actions.

2004-11-15 Martin Quinson
  - Port to ARM. Simply added the alignment and size descriptions. Should
    work, but the ARM machines are so slow that I didn't had the opportunity
    to 'make check' over there yet.

2004-11-15 Arnaud Legrand
  - Trace manager now written. It uses a heap structure and is therefore
    expected to be efficient. It may however be speeded up (particularly
    when many events occur at the same date) by using red and black
    trees. One day maybe...
  - Max-min linear system solver written. It uses a sparse matrix
    structure taking advantage of its expected use. Most operations are
    O(1) and free/calloc are called as few as possible. The computation of
    the minimum could however be improved by using a red and black tree
    (again ! ;).

2004-11-03 Arnaud Legrand
  - Rename every gras_* function that was in xbt/ to its xbt_
    counterpart.
  - Add a heap and a doubly-linked list to xbt
  - Added a dichotomy to the dictionaries. make check works as well before
    so I assume that the patch is correct. I do not know however if things
    run effectively faster than before now. :)

  Inclusion of the SimGrid tree in the GRAS one. The archive is renamed to
  SimGrid, and the version number is bumped to 2.x

2004-10-29 Martin Quinson
  - Introduction of the remote errors.
    They are the result of a RMI/RPC on the remote machine.
    ErrCodes being scalar values, you can't get the host on which those
    errors did happen. Extending the error mechanism as in Gnome is possible.
    No idea yet whether it is a good idea.

2004-10-28 Martin Quinson
  - Interface revolution: the Starred Structure Eradication.
    I used to do typedef struct {} toto_t; and then handle *toto_t.
    Arnaud (and Oli) didn't like it, and I surrendered. Now, you have:
      - ???_t is a valid type (builded with typedef)
      - s_toto_t is a structure (access to fields with .)
      - s_toto   is a structure needing 'struct' keyword to be used
      - e_toto_t is an enum
      -   toto_t is an 'object' (struct*)
    Example:
      typedef struct s_toto {} s_toto_t, *toto_t;
      typedef enum {} e_toto_t;
    Moreover, only toto_t (and e_toto_t) are public. The rest (mainly
     s_toto_t) is private.

  - While I was at it, all gras_<obj>_free() functions want a gras_<obj>_t*
    so that it can set the variable to NULL. It was so for dicts and sets,
    it changed for dynars.

  - Fix a bunch of memleaks in dict_remove
  - Fix a bug in sg/server_socket opening: it failed all the time.

2004-10-07 Martin Quinson
  - Speed up dynar lookup operation a bit.

    gras_dynar_get is dead.

    Now, you can choose between gras_dynar_get_cpy (the old gras_dynar_get
    but should be avoided for efficiency reasons) and gras_dynar_get_ptr
    (which gives you the address of the stored data).

    gras_dynar_get_as is an helpful macro which allows you to retrieve a
    copy of the data using an affectation to do the job and not a memcpy.

    int toto = gras_dynar_get_as(dyn,0,int); rewrites itself to
    int toto = *(int*)gras_dynar_get_ptr(dyn,0);

    It does not really speedup the dynar test because they are
    setting elements all the time (and look them seldom). But the dict does
    far more lookup than setting.

    So, this brings the dict_crash test from ~33s to ~25s (200000 elms).

2004-10-05 Martin Quinson
  - Allow to (en/dis)able the cycle detection at run time.

    Whether we should check for cycle or not is now a property of each
    datatype. When you think there may be some cycle, use datadesc_cycle_set.
    datadesc_cycle_unset allow to remove this property when previously set.

    Note that the cycle detection is off by default since it impacts the
    performance. Watch the data you feed GRAS with ;)

    This property is hereditary. Any element embedded in a structure having it
    set have it set for the time of this data exchange.

    You should set it both on sender and receiver side. If you don't set it on
    sender side, it will enter an endless loop. If you forget on receiver
    side, the cycles won't be recreated after communication.

  - Header reorganization.
    Kill gras_private.h, each submodule must load the headers it needs.

2004-10-04 Martin Quinson
  - Interface revolution: do not try to survive to malloc failure.

    Now, gras_malloc and friends call gras_abort() on failure.
    As a conclusion, malloc_error is not a valid error anymore, and all
      functions for which it was the only gras_error_t return value are
      changed. They now return void, or there result directly.
    This simplify the API a lot.

2004-09-29 Martin Quinson
  - Re-enable raw sockets.
    Created by gras_socket_{client,server}_ext;
    Used with gras_raw_{send,recv}
    No select possible.

    It should allow to kill the last bits of gras first version soon.

    This is not completely satisfactory yet (duplicate code with
     chunk_{send,recv}; a bit out of the plugin mechanism), but it should
     work.

  - Simplify transport plugin (internal) interface by not passing any
    argument to _server and _client, but embedding them in the socket
    struct directly.

2004-09-28 Martin Quinson
  - Finish the port to AIX.
    autoconf was my problem (segfault within the malloc replacement
    function. No idea why)

2004-09-16 Martin Quinson
  - Fix some size_t madness on 64bit architectures.

2004-09-08 Martin Quinson
  - Reduce the number of system headers loaded, overload some more system
    calls (such as malloc to cast the result of the system one, and work
    properly on AIX)
  - Fix and reintroduce the config support

2004-09-07 Martin Quinson
  - Source code reorganization to allow Arnaud to surf all over there.
  - Allow to document the logging categories.
  - Remove all uppercase from logging categories and useless cleanup in names.

2004-08-18 Martin Quinson
  Version 0.6.2 (protocol not changed; API changed)
  - Interface cleanup: gras_msgtype_by_name returns the type (instead of a
     gras_error_t), and NULL when not found. Functions expecting a msgtype
     as argument (msg_wait; msg_send) deal with NULL argument by providing a
     hopefully usefull message.
  - Portability to prehistoric sparcs again

2004-08-17 Martin Quinson
  Version 0.6.1 (protocol not changed; ABI not changed)
  - prealloc some buffers to speed things up

2004-08-11 Martin Quinson
  Version 0.6 (protocol not changed; ABI expended)
  - The parsing macro can deal with the references, provided that you add
    the relevant annotations (using GRAS_ANNOTE(size,field_name))

2004-08-09 Martin Quinson
  Version 0.5 (protocol not changed; ABI changed)
  - Allow to off turn the cycle detection code in data exchange at
    compilation time. It should be at run time, but I'm short of time (and
    the config stuff is still broken). That way, we keep dict out of the
    critical path, which is good because the performance is poor:
     - search not dichotomial yet
     - dynar give no way to access their content and memcpy everytime
  - In composed data description (struct, ref and so on), stop foolness of
    keeping the subtype's ID, but store the type itself. This keeps sets out
    of the critical path, which is good since they rely on dynar and
    dictionaries. The only loose of that is that we cannot detect the
    redeclaration of a structure/union with another content (but I'm not sure
    the code detected well this error before anyway). We still can detect
    the redefinition discrepancy for the other types.
  - Use a whole bunch of optimisation flags (plus -fno-strict-aliasing since
    it breaks the code because of type-punning used all over the place).
    This breaks on all non-gcc architectures (for now).

  All those changes (plus the buffer of last time) allow me to gain 2 order
  of magnitude on cruel tests consisting of 800000 array of integers on two
  level of a hierarchical structure (200 secondes -> 4 secondes)

  API change:
    - the selector of reference must now return the type it points to, not
      the ID of this type.

2004-08-06 Martin Quinson
  Version 0.4 (protocol changed; ABI not changed)
  - Allow to pass --gras-log argument to processes in simulation mode. Really.
  - New debugging level: trace (under debug) to see effect of GRAS_IN/OUT
  - Implement a buffer transport, and use it by default (it relies on tcp in
     real life and on sg in simulation).
    That's a bit hackish since I had a new field to the structure to store
     its data without interfering with the subtype ones. Inheritance
     is tricky in C. And that's a kind of reverse inheritance with one class
     derivating two classes. Or maybe a game with java interfaces. Anyway,
     that's damn hard in C (at least).
    Moreover, I got tired while trying to ensure plugin separation and
     genericity in SG mode. MSG wants me to do weird things, so let's go for
     cruel hacks (temporarily of course ;).
     See comment in transport_private.h:71
  - do not include all the _interface headers in private but in the files
    which really need them (to cut the compilation time when they are
    modified)

2004-07-26 Martin Quinson
  Version 0.3 (protocol not changed; ABI changed)
  - Major overhault of the datadesc interface to simplify it:
    - shorted the function names:
      s/gras_datadesc_declare_struct/gras_datadesc_struct/ and so on
    - add a trivial way to push/pop integers into the cbps without malloc.
      This allows to make really generic sub_type description, which simply
        pop their size of the stack.
    - add a function gras_datadesc_ref_pop_arr() which does what users want
      most of the time: Declare a dynamic array (which pops its size of the
      stack) and declare a reference to it. Poor name, but anyway.
    - kill the post-send callback, add a post-receive one

2004-07-23 Martin Quinson
  Version 0.2 (protocol changed; ABI changed)
  - add some testing for cpbs in the test cases, and fix some more bugs.
    This invalidate again the little64 data file, since I cannot regenerate
    it myself.
  - remove an awfull optimization in the logging stuff, allowing me to:
    - understand it again
    - learn gcc how to check that the argument match the provided format
    - fix all errors revealed by gcc after that
  - internal keys of dict are not \0 terminated. Deal with it properly in
    loggings instead of segfaulting when the user want to see the logs :-/

2004-07-22 Martin Quinson
  - Fix some stupid bug preventing cbps (callback postit) from working

2004-07-21 Martin Quinson
  - Some documentation cleanups
  - remove the useless last argument of msgtype_declare
  - rename the Virtu functions to fit into the 'os' namespace
  - move headers src/include -> src/include/gras/ and stop fooling with
    gras -> . symbolic link
  - make distcheck is now successful

2004-07-19 Martin Quinson
  Version 0.1.1
  - Build shared library also
  - Install html doc to the right location
  - stop removing maintainer files in make clean
  - build tests only on make check

2004-07-13 Martin Quinson
  version 0.1
  - No major issue in previous version => change versioning schema
  - Re-enable little64 convertion test now that Abdou kindly regenerated the
    corresponding dataset.

2004-07-11 Martin Quinson
  version 0.0.4
  - Get it working with any kind of structure (we can compute the padding
    bytes remotely for all the architectures I have access to)
  - Implement the structure parsing macro (still not quite robust/complete)
  - Improvement to the remote testing toysuite

2004-07-10 Martin Quinson
 [autoconf mechanism]
  - get ride of a bunch of deprecated macros
  - actually run the test for two-compliment, not only compile it :-/
  - test whether the structures get packed (and bail out if yes. Damn.
    Alignment is a serious matter)
  - test whether the structures get compacted (but respecting the alignment
    constraints of each types)
  - test whether the array fields of structures can straddle alignment boundaries
 [base]
  - Damnit, double are bigger than float (typo in creation of 'double' datadesc)
    (took me 2 hours to find that bug, looking at the wrong place)
  - Add gras_datadesc_declare_{union,struct}_close(). They must be used
    before sending/receiving and are used to compute the offsets of fields
  - Given that padding size depend even on compiler options, keep track of
    alignment and aligned_size only for the current architecture. Not a big
    deal since we send structure fields one after the other (seems
    reasonable).
  - Add the datastructure used for IEEE paper by the PBIO guys to the test
    program, let it work on linux/gcc/little32. portability todo.

2004-07-08 Martin Quinson
  - import and improve remote compilation support from FAST
  - make sure make check works on half a dozen of machines out there

2004-07-07 Martin Quinson
 Let's say it's version 0.0.3 ;)
  - Implement conversions (yuhu!)
  - Let it work on solaris (beside conversion, of course)
  - Stupid me, using rand() to generate the conversion datatests in not wise.

2004-07-06 Martin Quinson
  - Let make dist work, since I'm gonna need it to compile on remote hosts
  - Let Tests/datadesc_usage write the architecture on which the file was
    generated as first byte.
  - Add PowerPC (being also IRIX64), SPARC (also power4) and ALPHA
    architecture descriptions.
  - Add datadesc_usage.{i386,ppc,sparc} files being the result of execution
    on those architectures.
  - Optimization: send/recv array of scalar in one shoot

2004-07-05 Martin Quinson
  - YEAH! GRAS/SG and GRAS/RL are both able to run the ping example !

  - Plug a whole bunch of memleaks
  - each process now have to call gras_{init,exit}. One day, their log
    settings will be separated
  - Continue the code factorisation between SG, RL and common in Transport.

2004-07-04 Martin Quinson
 [Transport]
  - Redistribution between SG and RL.
    We wanna have to accept in SG, so move accepted related parts of RL in
    the common part. (more precisely, the dynar of all known sockets is no
    more a static in transport.c, but part of the process_data)
 [Core/module.c]
 [gras_stub_generator]
  - Bug fix: Do call gras_process_init from gras_init (wasnt called in RL).

2004-07-03 Martin Quinson
  - Create a new log channel tbx containing dict, set, log, dynar (to shut
    them all up in one shot)
 [DataDesc]
  - Fix the ugly case of reference to dynamic array.
  - New (semi-public) function gras_datadesc_size to allow the messaging
    layer to malloc the needed space for the buffer.
 [Transport]
  - gras_socket_close now expect the socket to close (and not its address to
    put NULL in it after it). This is because the socket passed to handlers
    is one of their argument (=> not writable).
 [Messaging]
  - propagate the interface cleanup from last week in datadesc, ie remove a
    superfluous level of indirection. User pass adress of variable
    containing data (both when sending and receiving), and not of a variable
    being a pointer to the data. Let's say that I like it better ;)
      The price for that is constructs like "int msg=*(int*)payload" in
    handlers, but it's a fine price, IMHO.
 [examples/ping]
  - Let it work in RL (yuhu)

2004-06-21 Martin Quinson
 [Transport]
   - porting SG plugin and SG select to new standards (works almost).
   - plug memleaks and fix bugs around.

 [DataDesc]
   - cleanup the prototype of data recv and force users to specify when they
     want to handle references to objects. Test case working even for cycles.
   - plug memleaks. Valgrind is perfectly ok with this.

2004-06-12 Martin Quinson
 [Transport]
   - cleanup the separation between plugin and main code in plugin creation

2004-06-11 Martin Quinson
 [Transport]
   - Reput hook for raw sockets, needed for BW experiments
   - kill a few lines of dead code
 [Data description] Interface cleanup
   - gras_datadesc_by_name returns the searched type or NULL.
     That way, no variable is needed to use a type desc once, which makes
      the code clearer.
   - gras_datadesc_declare_[struct|union]_append_name is removed. The last
      two parameters were strings (field name, type name), leading to
      common errors.
 [Dicos] Interface cleanup
   - gras_dico_retrieve -> gras_dico_get ; gras_dico_insert -> gras_dico_set
     This is consistant with the dynar API.

2004-04-21 Martin Quinson
 [Messaging]
   - Porting to new standards.
 [Data description]
   - interface cleanup.
     There is no bag anymore, no need to take extra provision to mask the
       pointers behind "ID".
     Better splitup of functions between files create/exchange/convert.
       This is still a bit artificial since convert and receive are so
       interleaved, but anyway.
 [Virtu(process)]
   - add a queued message list to procdata (the ones not matching criteria
     in msg_wait)
   - factorize some more code between SG and RL wrt procdata
 [Tests]
   - use gras_exit in example to track memleaks
   - get rid of gs_example now that GS is properly integrated into gras
   - update run_test to integrate the latest tests (datadesc)
 [Logging]
   - rename WARNINGn macros to WARNn since it prooved error-prone

2004-04-19 Martin Quinson
 [Data description]
   - register init/exit functions within gras module mechanism
   - send/receive function.
   Convertion is not implemented, but short-cutted if not needed.
   struct/array elements are sent one by one (instead of block-wise), but
     nobody really cares (yet). Get a prototype before optimizing.
   - tests (using a file socket) for DD send/receive on:
     - base types: int, float
     - array: fixed size, string (ie ref to dynamic string)
     - structure: homogeneous, heterogeneous
     - chained list, graph with cycle
   Believe it or not, valgrind is not too unhappy with the results. The
    cycle happily segfaults, but the others are ok. And I'm sick of pointers
    for now.
 [Transport]
   [File plugin]
     - Bugfix when using a filename explicitly (instead of '-')

2004-04-09 Martin Quinson
 [Transport plugins]
   - factorize more code between RL and SG in socket creation
   - Complete the implementation and tests of:
     o TCP
     o file (only in RL, and mainly for debugging)

     I lost 3 days to design a portable address resolver, and then decided
       that the prototype mainly have to run on my box.
     Addressing portability too early may be like optimizing too early :-/
 [Tests]
   - use gras_init in the Tests instead of the crappy parse_log_opt
     (the latter function is removed)
 [Conditional execution]
   - New functions: gras_if_RL/gras_if_SG (basic support for this)
 [Code reorganisation]
  - Get rid of libgrasutils.a since it makes more trouble than it solves.
    Build examples against the RL library, since there is no way to disable
    its creation for now.

For information, the beginning of coding on GRAS was back in june
2003. I guess that every line has been rewritten at least twice since
then.
